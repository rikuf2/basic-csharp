{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part1/part1-5",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Repetition\",\n  \"nav_order\": 5,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We now can do simple commands, one at a time. But what if we want to do something more than once?\"), mdx(\"p\", null, \"For example, let's make a program which asks the user for a number 7 times and sums them up.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int sum = 0;\\nConsole.Write(\\\"Give integer value: \\\");\\nint userInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + intValue);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\\nConsole.Write(\\\"Give integer value: \\\");\\nuserInput = Convert.ToInt32(Console.ReadLine());\\nsum = sum + userInput;\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\")), mdx(\"p\", null, \"This will get the job done, but as you can see, there is plenty of repetition, and many lines of code for such a simple task. What if we wanted to ask the user 10 numbers? Or 1000? We could keep copying the same lines, but that would be quite insane.\"), mdx(\"p\", null, \"The easier and nicer way to solve this problem, is with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"loops\"), \", especially the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"while-loop\"), \", which we  peeked into a little in previous parts. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int sum = 0;\\nint readNumbers = 0;\\n\\nwhile (true) \\n{\\n    if (readNumbers == 7) {\\n        break;\\n    }\\n\\n    Console.WriteLine(\\\"Give a number\\\");\\n    sum = sum + Convert.ToInt32(Console.ReadLine());\\n    readNumbers = readNumbers + 1;\\n}\\nConsole.WriteLine(\\\"Sum is \\\" + sum);\\n\")), mdx(\"p\", null, \"Let's look deeper into the while loops.\"), mdx(\"h2\", {\n    \"id\": \"while-loop-forever-and-ever-and-ever\"\n  }, \"While loop, forever and ever and ever...\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (expression)\\n{\\n    // Your code is here\\n    // Here can be any amount of code\\n}\\n\")), mdx(\"p\", null, \"For now, we shall be using the boolean value of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"true\"), \" as our expression. This can lead us to a neverending loop. Once the code block has been run, the value of the expression is checked. As it is always true, it will always start running the code again.\"), mdx(\"h2\", {\n    \"id\": \"ending-a-while-loop\"\n  }, \"Ending a while loop\"), mdx(\"p\", null, \"We did manage to create a program in the previous example, that is not looping forever. We did that with the keyword \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"break\"), \". As the name suggests, it breaks the loop. More technically, it stops the current code block from running, and jumps ahead to the next code block.\"), mdx(\"p\", null, \"Usually a break is used when the user gives a certain kind of input, or when the loop-calculation has reached a certain point, just like in our example above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 1;\\n\\nwhile (true) \\n{\\n    Console.WriteLine(number);\\n    if (number >= 5) {\\n        break;\\n    }\\n    number = number + 1;\\n}\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n3\\n4\\n5\\nAll done!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"We created our original number outside of the loop. If we would create it in the beginning, it would be recreated every time the loop starts again.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    int number = 1;\\n    Console.WriteLine(number);\\n    if (number >= 5) {\\n        break;\\n    }\\n    number = number + 1;\\n}\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n1\\n1\\n1\\n1\\n... \\n(This keeps going forever)\\n\")), mdx(\"p\", null, \"You can also ask user input in a while loop. In the following example, we will ask the user if they want to continue the program.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Do you want to continue?\\\");\\n    string input = Console.ReadLine();\\n    if (input == \\\"no\\\") \\n    {\\n        break;\\n    }\\n    Console.WriteLine(\\\"Let's keep going!\\\");\\n}\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Do you want to continue?\\n> yes\\nLet's keep going!\\nDo you want to continue?\\n> totally\\nLet's keep going!\\nDo you want to continue?\\n> no\\nAll done!\\n\")), mdx(\"p\", null, \"In the previous example, we asked the user for string input. Of course, other types of variable work just as well.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    int command = Convert.ToInt32(Console.ReadLine());\\n    if (command == 0) \\n    {\\n        break;\\n    }\\n\\n    Console.WriteLine(\\\"You gave \\\" + command);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input an integer, 0 quits\\n> 5\\nYou gave 5\\nInput an integer, 0 quits\\n> -2\\nYou gave -2\\nInput an integer, 0 quits\\n> 0\\nAll done!\\n\")), mdx(\"h2\", {\n    \"id\": \"returning-to-the-beginning-of-a-while-loop\"\n  }, \"Returning to the beginning of a while loop\"), mdx(\"p\", null, \"We return to the beginning of a while loop when all the code inside the code block has been run. It is possible to return to the beginning from other parts of code, as well. We will do that with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"continue\"), \" keyword.\"), mdx(\"p\", null, \"In the example below, we will ask the user for positive integers. If the user gives a negative integer, we will print out a message \\\"Not a positive integer\\\" and return to the beginning of the loop. If the user gives a zero, the program will end.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input a positive integer, 0 quits\\n> 12\\nYou gave 12\\nInput a positive integer, 0 quits\\n> -2\\nNot a positive integer!\\nInput a positive integer, 0 quits\\n> 0\\nAll done!\\n\")), mdx(\"p\", null, \"You might have noticed, that we used two ifs instead of if-else-if structure. Let's see our code with if-else.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    else if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"The only difference in code is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"else if\"), \" instead of just if. What if we change the order inside the block?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"The functionality from the user's perspective is identical. Let's combine this code into if-else-structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) \\n{\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n    }\\n    else if (number == 0) \\n    {\\n        break;\\n    }\\n    else \\n    {\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n    }\\n}\\n\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"Now let's comment the newest versions of our program, to see what happens in the code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Repeat until the block has been exited\\nwhile (true) \\n{\\n    // Ask user for input\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    // Read the input\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    \\n    // Check the user input is above zero, give \\\"error\\\"\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n        continue;\\n    }\\n    // Check if user wants to exit the loop\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // Print the outcome\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n}\\n\\n// Confirm exit with print\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"All the lines and inner code blocks have a simple, meaningful task to perform. What about the combined version?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Repeat until the block has been exited\\nwhile (true) \\n{\\n    // Ask user for input\\n    Console.WriteLine(\\\"Input a positive integer, 0 quits\\\");\\n    // Read the input\\n    int number = Convert.ToInt32(Console.ReadLine());\\n\\n    // if-else-if-else\\n    // One code block, multiple functions...\\n\\n    // Check if number is too small, give warning\\n    if  (number < 0)\\n    {\\n        Console.WriteLine(\\\"Not a positive integer!\\\");\\n    }\\n    // If the number is not too small, check if the user wants to exit the loop\\n    else if (number == 0) \\n    {\\n        break;\\n    }\\n    // If the number is not too small and the user does not want to exit the loop, print the outcome\\n    else \\n    {\\n    Console.WriteLine(\\\"You gave \\\" + number);\\n    }\\n}\\n// Confirm exit with print\\nConsole.WriteLine(\\\"All done!\\\");\\n\")), mdx(\"p\", null, \"As you can see, the if-else-if-else block has quite a huge task, and defining it takes few steps. When you design your programs, you should aim for simple tasks for all the code blocks.\"), mdx(\"h2\", {\n    \"id\": \"calculations-with-while-loops\"\n  }, \"Calculations with while loops\"), mdx(\"p\", null, \"While-loops are often used for calculations. For example programs, that handle undetermined amounts of user inputs, are based on while-structrure. In these kinds of programs we can gather for example statistics from given numbers or other inputs.\"), mdx(\"p\", null, \"For a program to be able to print information after the while loop has been executed, we must store and modify data during the loop.\"), mdx(\"p\", null, \"If the variable for data storage is introduced inside the block dedicated for the loop, the variable is accessible only inside the block, but not elsewhere. Let's demonstrate that with commented code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Repeat until the block has been exited\\n\\nwhile (true) \\n{\\n    // Create a variable as storage for counting 1s\\n    int countOnes = 0;\\n    // Ask for integers\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    // Read user input\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    // If the input is 0, exit the loop\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // If the input is 1, add to count\\n    if  (number == 1)\\n    {\\n        // Increase the value of countOnes by 1\\n        countOnes = countOnes + 1;\\n    }\\n}\\n\\n// This cannot access the variable \\\"countOnes\\\",\\n// as it has been defined in the inner block.\\n// Our code does not compile.\\nConsole.WriteLine(\\\"Amount of ones: \\\" + countOnes);\\n\")), mdx(\"p\", null, \"All the variables are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"visible\"), \" to the code block they are in. Let's modify our example, so that the printing line is inside the inner code block, and see what happens.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Repeat until the block has been exited\\n\\nwhile (true) \\n{\\n    // Create a variable as storage for counting 1s\\n    int countOnes = 0;\\n    // Ask for integers\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    // Read user input\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    // If the input is 0, exit the loop\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // If the input is 1, add to count\\n    if  (number == 1)\\n    {\\n        // Increase the value of countOnes by 1\\n        countOnes = countOnes + 1;\\n    }\\n    // Print the amount of 1s from input\\n    Console.WriteLine(\\\"Amount of ones: \\\" + countOnes);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input an integer, 0 quits\\n> 5\\nAmount of ones: 0\\nInput an integer, 0 quits\\n> 1\\nAmount of ones: 1\\nInput an integer, 0 quits\\n> 1\\nAmount of ones: 1\\nInput an integer, 0 quits\\n> 2\\nAmount of ones: 0\\nInput an integer, 0 quits\\n> 0\\n\")), mdx(\"p\", null, \"Now the program works, but not the way we intended. As the \\\"storage\\\" is created inside the loop, whenever the loop loops, the variable is created again.\"), mdx(\"p\", null, \"If we want the program to work, we have to create the variable before the loop. The next example works as intended.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Create a variable as storage for counting 1s\\nint countOnes = 0;\\n\\n// Repeat until the block has been exited\\nwhile (true) \\n{\\n\\n    // Ask for integers\\n    Console.WriteLine(\\\"Input an integer, 0 quits\\\");\\n    // Read user input\\n    int number = Convert.ToInt32(Console.ReadLine());\\n    // If the input is 0, exit the loop\\n    if (number == 0) \\n    {\\n        break;\\n    }\\n    // If the input is 1, add to count\\n    if  (number == 1)\\n    {\\n        // Increase the value of countOnes by 1\\n        countOnes = countOnes + 1;\\n    }\\n}\\n\\n// Print the amount of 1s from input\\nConsole.WriteLine(\\\"Amount of ones: \\\" + countOnes);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input an integer, 0 quits\\n> 5\\nInput an integer, 0 quits\\n> 1\\nInput an integer, 0 quits\\n> 1\\nInput an integer, 0 quits\\n> -1\\nInput an integer, 0 quits\\n> 0\\nAmount of ones: 2\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '034 Continue',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks the user if they want to continue. If the user answers \\\"no\\\", then quit the program. Otherwise, ask again.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Use a while-loop!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Do you want to continue?\\n> Yes\\nDo you want to continue?\\n> Hot potato\\nDo you want to continue?\\n> no\\n\"))), mdx(Exercise, {\n    title: '035 Answer to life',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program, which asks the user for integers, until the user give the number \\\"42\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 41\\nGive a number:\\n> 68\\nGive a number:\\n-42\\nGive a number:\\n42\\n\"))), mdx(Exercise, {\n    title: '036 Power of positivity',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program, which asks the user for integers. If the number is zero, exit the program. If the number is negative, give the user message \\\"That is negative\\\". If the number is positive, output the number, raised to its second power (the number multiplied with itself).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\n25\\nGive a number:\\n> -2\\nThat is negative\\nGive a number:\\n> 4\\n16\\nGive a number:\\n0\\n\"))), mdx(Exercise, {\n    title: '037 Counting numbers',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks the user for integers. If the integer is 0, quit. In the end, output \\\"Total amount of numbers:\\\" and the amount. Do not count the 0 into the amount.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal amount of numbers: 3\\n\"))), mdx(Exercise, {\n    title: '038 Counting negatives',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks the user for integers. If the integer is 0, quit. In the end, output the total amount of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"negative numbers\"), \" with \\\"Total amount of negative numbers:\\\" and the amount. Do not count the 0 into the amount.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal amount of negative numbers: 1\\n\"))), mdx(Exercise, {\n    title: '039 Sum of numbers',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks the user for integers. If the integer is 0, quit. In the end, output the total \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sum\"), \" of the numbers with \\\"Total sum of numbers:\\\" and the sum. Do not count the 0 into the sum, even though it does not change the result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal sum of numbers: 25\\n\"))), mdx(Exercise, {\n    title: '040 Amount and sum',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks the user for integers. Exit with 0. In the end, output both the amount and the sum. Do not count 0 to either.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nGive a number:\\n> -2\\nGive a number:\\n> 22\\nGive a number:\\n> 0\\nTotal sum of numbers: 25\\nTotal amount of numbers: 3\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"You will need two variables to store the data, one for the sum, one for the amount.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#while-loop-forever-and-ever-and-ever","title":"While loop, forever and ever and ever..."},{"url":"#ending-a-while-loop","title":"Ending a while loop"},{"url":"#returning-to-the-beginning-of-a-while-loop","title":"Returning to the beginning of a while loop"},{"url":"#calculations-with-while-loops","title":"Calculations with while loops"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Repetition"}}},"pageContext":{"id":"4d01cc93-3b50-50a3-ba8e-4ecc4db7151b"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}