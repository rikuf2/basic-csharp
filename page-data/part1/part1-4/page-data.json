{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part1/part1-4",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Conditional and comparison\",\n  \"nav_order\": 4,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"So far, our programs have been quite linear, going step-by-step in order, without any options or alternatives. We do often want options in our software, meaning that functionality is dependant on the state of variables in the program. \"), mdx(\"p\", null, \"For the program to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"branch\"), \" with for example user input, we will need a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conditional statement\"), \" in the program. The most simple conditional is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"Hello world!\\\");\\nif (true) \\n{\\n    Console.WriteLine(\\\"This is always printed!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello world!\\nThis is always printed!\\n\")), mdx(\"p\", null, \"On the other hand, we could make a part of our code unreachable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"Hello world!\\\");\\nif (false) \\n{\\n    Console.WriteLine(\\\"This is never printed!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello world!\\n\")), mdx(\"p\", null, \"This is, of course, quite unnecessary, even though possible.\"), mdx(\"p\", null, \"A conditional statement begins with a keyword \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if\"), \", which is followed by \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"brackets ( )\"), \". Inside the brackets is the expression that is evaluated. The result of the evaluation is a truth value. In the examples above there was no need for evaluation, as they were already truth values.\"), mdx(\"p\", null, \"The brackets are followed by a code block, enclosed in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"{ }\"), \". The code inside the block is run, if the expression inside the brackets is evaluated as true.\"), mdx(\"p\", null, \"Let us examine an example, where we compare integers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 11;\\nif (number > 10) \\n{\\n    Console.WriteLine(\\\"The number was larger than 10\\\");\\n}\\n\")), mdx(\"p\", null, \"If the expression in the conditional statement is evaluated as true, above in the line of \\\"if the value in the variable number is greater than 10\\\", the code execution moves inside the block defined within the conditional statement.\"), mdx(\"p\", null, \"If the statement would be false, the code execution moves to the next line after the closing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"}\"), \" of the code block.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"There is no semicolon after the if-clause, as the statement does not end after the conditional part.\"), mdx(\"h3\", {\n    \"id\": \"reminder-of-code-indent\"\n  }, \"Reminder of code indent\"), mdx(\"p\", null, \"The code inside a block should be indented. For example, the code inside an if statement should be indented more than the keyword \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if\"), \" in the code. The ending \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"}\"), \" should be at the same level as the if.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 11;\\nif (number > 10) \\n{\\nConsole.WriteLine(\\\"This indention is wrong\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 11;\\nif (number > 10) \\n{\\n    Console.WriteLine(\\\"This indention is right\\\");\\n}\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Remember ALT + SHIFT + F, which will format the code automatically.\"), mdx(\"h2\", {\n    \"id\": \"relational-operators\"\n  }, \"Relational operators\"), mdx(\"p\", null, \"The following are relational operators:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"Sign\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"Meaning\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \">\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"greater than\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \">=\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"greater than or equal to\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"<\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"less than\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"<=\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"less than or equal to\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"==\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"equal to\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"!=\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"left\"\n  }, \"not equal to\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 55;\\n\\nif (number != 0) \\n{\\n    Console.WriteLine(\\\"The number was not equal to zero\\\");\\n}\\n\\nif (number >= 1000) \\n{\\n    Console.WriteLine(\\\"The number was at least 1000\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The number was not equal to zero\\n\")), mdx(\"h2\", {\n    \"id\": \"options-or-else\"\n  }, \"Options, or Else!\"), mdx(\"p\", null, \"If the expression inside the if-clause evaluates as false, the code execution continues to the next statement. This is not always desired, but we want to have an option for the cases, when the if is evaluated as false.\"), mdx(\"p\", null, \"This can be achieved with an else-statement, that is combined to the if-statement.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 4;\\n\\nif (number > 5) \\n{\\n    Console.WriteLine(\\\"Your number is greater than five!\\\");\\n} \\nelse \\n{\\n    Console.WriteLine(\\\"Your number is 5 or less!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Your number is 5 or less!\\n\")), mdx(\"p\", null, \"If the conditional statement has an else branch, the code block defined for the else is run, if the if-clause is evaluated as false. Notice the indentation and lines!\"), mdx(\"h2\", {\n    \"id\": \"more-options-else-if\"\n  }, \"More options, else if\"), mdx(\"p\", null, \"If you want to have more than one option, use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"else-if-structure\"), \". It is similar to else, but has an if-conditional. There can be multiple of them, and they come after if, before else.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 3;\\n\\nif (number == 1) \\n{\\n    Console.WriteLine(\\\"Number is one!\\\");\\n} \\nelse if (number == 2) \\n{\\n    Console.WriteLine(\\\"Number is two!\\\");\\n} \\nelse if (number == 3) \\n{\\n    Console.WriteLine(\\\"Number is three!\\\");\\n} \\nelse \\n{\\n    Console.WriteLine(\\\"Number is something else!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Number is three!\\n\")), mdx(\"p\", null, \"In the example above, we first check if the number is equal to 1. As it is not, we move to the first else-if and compare the number to value of 2. As this is not the case, we move forward, and compare our variable's value to 3. As this is true, we execute the code inside the code block, and print the message shown above. We do not go into the else-statement, because an earlier statement evaluated as true.\"), mdx(\"h2\", {\n    \"id\": \"order-of-comparison\"\n  }, \"Order of comparison\"), mdx(\"p\", null, \"As any code, the comparisons are done in order, from top to bottom, left to right. When we reach a conditional which evaluates to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"true\"), \", we execute that block and end comparison.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 42;\\n\\nif (number == 0) \\n{\\n    Console.WriteLine(\\\"The number is 0.\\\");\\n} \\nelse if (number > 0) \\n{\\n    Console.WriteLine(\\\"The number is greater than 0.\\\");\\n} \\nelse if (number > 2) \\n{\\n    Console.WriteLine(\\\"The number is greater than 2.\\\");\\n} \\nelse \\n{\\n    Console.WriteLine(\\\"The number is smaller than 0.\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The number is greater than 0.\\n\")), mdx(\"p\", null, \"In the example, the condition \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"number > 0\"), \" is evaluated as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"true\"), \", so we execute the code block related to that, and end comparison. Even if the next statement would also evaluate to true, we do not reach that part of the code (and never can).\"), mdx(\"h2\", {\n    \"id\": \"conditional-statement-and-boolean-variable\"\n  }, \"Conditional statement and boolean variable\"), mdx(\"p\", null, \"The evaluated value of an expression inside the if-clause's brackets must be a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"boolean\"), \". Boolean is a representation of a truth-value, and is either \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"bool truthValue = true;\\nConsole.WriteLine(\\\"The value of truthValue is \\\" + truthValue);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The value of truthValue is True\\n\")), mdx(\"p\", null, \"Or with a conditional,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"bool truthValue = true;\\nif (truthValue)\\n{\\n    Console.WriteLine(\\\"This is awesome!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"This is awesome!\\n\")), mdx(\"p\", null, \"Comparison can be used outside statements, as well. Then the value of a boolean is stored into a boolean variable until further use.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int first = 1;\\nint second = 3;\\nbool isFirstLargerThanSecond = first > second;\\n\")), mdx(\"p\", null, \"Now the value of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"isFirstLargerThanSecond\"), \" is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"false\"), \". Let's change the example a bit and continue:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int first = 1;\\nint second = 3;\\nbool isFirstSmallerThanSecond = first < second;\\n\\nif (isFirstSmallerThanSecond)\\n{\\n    Console.WriteLine(\\\"1 is less than 3!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1 is less than 3!\\n\")), mdx(\"h2\", {\n    \"id\": \"remainder\"\n  }, \"Remainder\"), mdx(\"p\", null, \"Remainder is not used as frequently, but is a nice tool, especially if we want to check if something is divisible by some other number.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int remainder = 7 % 2;\\nConsole.WriteLine(remainder); // prints 1\\nConsole.WriteLine(5 % 3); // prints 2\\nConsole.WriteLine(7 % 4); // prints 3\\nConsole.WriteLine(8 % 4); // prints 0\\nConsole.WriteLine(1 % 2); // prints 1\\n\")), mdx(\"p\", null, \"As remainder is an operation similar to other calculations, we can use it in for example an if clause\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string userInput = Console.ReadLine();\\n\\nint number = Convert.ToInt32(userInput);\\n\\n\\nif ((number % 400) == 0) \\n{\\n    Console.WriteLine(\\\"The number \\\" + number + \\\" is divisible by four hundred\\\");\\n} \\nelse \\n{\\n    Console.WriteLine(\\\"The number \\\" + number + \\\" is not divisible by four hundred\\\");\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"conditionals-an-equality-of-variables\"\n  }, \"Conditionals an equality of variables\"), mdx(\"p\", null, \"In most programming languages, including C#, string is of reference type, and for example integer, boolean and double are value types. \"), mdx(\"p\", null, \"In some of the programming languages, this means that string comparison has to be done differently from other variables. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"C# is more forgiving.\"), \" We can compare two strings with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"==\"), \" operator, at least in this point of the course.\"), mdx(\"p\", null, \"For example the following works in C#, while in most other languages it would not:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string a = \\\"word\\\";\\nstring b = \\\"word\\\";\\nConsole.WriteLine(a == b);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"True\\n\")), mdx(\"p\", null, \"Other way to compare strings, is with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"equals-method\"), \". The method compares the value of an object. We will go deeper into that later, now it is enough for you to know such a method exists.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string a = \\\"word\\\";\\nstring b = \\\"word\\\"; \\n\\nConsole.WriteLine(a.Equals(b));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"True\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '024 Speeding',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Let's create a program, which asks the user for an integer.\"), mdx(\"p\", null, \"If the given integer is larger than 120, output \\\"Speeding!\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Your speed:\\n> 5\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Your speed:\\n> 125\\nSpeeding!\\n\"))), mdx(Exercise, {\n    title: '025 Orwell',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks for an integer. If the integer is 1984, output \\\"Orwell\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n>1985\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 1984\\nOrwell\\n\"))), mdx(Exercise, {\n    title: '026 Too old',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks for an integer. If the integer is less than 1900, output \\\"You're old\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give your year of birth:\\n>1985\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give your year of birth:\\n> 1899\\nYou're old\\n\"))), mdx(Exercise, {\n    title: '027 Stay positive',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which tells if the given number is positive (greater than zero), or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 5\\nIt is positive\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n-2\\nIt is not positive\\n\"))), mdx(Exercise, {\n    title: '028 Over eighteen',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which tell if the given person is legally adult (in Finland, over 18), or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"How old are you?\\n> 5\\nYou're under age!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"How old are you?\\n> 18\\nYou're an adult!\\n\"))), mdx(Exercise, {\n    title: '029 Larger number',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks for two integers. The program should tell which of them is greater. If they are equal, that should be noted, too.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give the first number!\\n> 3\\nGive the second number!\\n> 2\\nThe larger number is 3!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give the first number!\\n> 3\\nGive the second number!\\n> 4\\nThe larger number is 4!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give the first number!\\n> 3\\nGive the second number!\\n> 3\\nThey are equal!\\n\"))), mdx(Exercise, {\n    title: '030 Course grading',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Here is the grading for this course:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Percent\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Grade\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"< 0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Impossible\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0 - 49\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Fail\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"50 - 59\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"60 - 69\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"70 - 79\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"3\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"80 - 89\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"90 - 100\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"5\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"> 100\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Outstanding!\")))), mdx(\"p\", null, \"Create a program, which asks the user for their percent, and gives them their score. A few examples:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give your percent [0 - 100]:\\n> -2\\nImpossible\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give your percent [0 - 100]:\\n> 49\\nFail\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give your percent [0 - 100]:\\n> 75\\nGrade: 3\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give your percent [0 - 100]:\\n> 99\\nGrade: 5\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give your percent [0 - 100]:\\n> 9001\\nOutstanding!\\n\"))), mdx(Exercise, {\n    title: '031 Even or odd',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks for an integer and tells the user if it is even or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 2\\nIt is even.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number\\n> 5\\nIt is odd.\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"You might want to use the % operator to get the remainder after a division with 2.\")), mdx(Exercise, {\n    title: '032 Enter friend',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks for a string. If the string is \\\"Mellon\\\", print \\\"Welcome, friend\\\", otherwise print \\\"They've got a cave troll!\\\"\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Speak, friend, and enter!\\n> Let meeeee in!\\nThey've got a cave troll!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Speak, friend, and enter!\\n> Mellon\\nWelcome, friend\\n\"))), mdx(Exercise, {\n    title: '033 Echo',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program which asks for two string. If the strings are equal, print \\\"Echo!\\\", otherwise print \\\"Nope!\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give the first string:\\n> Potato\\nGive the second string:\\n> Potato\\nEcho!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give the first string:\\n> Potato\\nGive the second string:\\n> Tomato\\nNope!\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"items":[{"url":"#reminder-of-code-indent","title":"Reminder of code indent"}]},{"url":"#relational-operators","title":"Relational operators"},{"url":"#options-or-else","title":"Options, or Else!"},{"url":"#more-options-else-if","title":"More options, else if"},{"url":"#order-of-comparison","title":"Order of comparison"},{"url":"#conditional-statement-and-boolean-variable","title":"Conditional statement and boolean variable"},{"url":"#remainder","title":"Remainder"},{"url":"#conditionals-an-equality-of-variables","title":"Conditionals an equality of variables"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Conditional and comparison"}}},"pageContext":{"id":"adf0a037-ba05-5bae-ac45-9ca8b3f40c5d"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}