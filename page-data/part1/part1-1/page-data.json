{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part1/part1-1",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Printing and reading\",\n  \"nav_order\": 1,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The basic structure of a program is following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program\\n{\\n    public static void Main(string[] args)\\n    {\\n        // Add your statements here\\n    }\\n}\\n\")), mdx(\"p\", null, \"The program execution starts from the first line after \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void Main(string[] args) {\"), \" and ends at the closing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"}\"), \" bracket. Everything in between is run one row at a time. For example, the most common first program of any programmer, the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hello World!\"), \", would go like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"In this example, the only runnable statement is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine(\\\"Hello World!\\\");\"), \", which prints out\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello World!\\n\")), mdx(\"p\", null, \"We will later focus on the terms \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public class\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void\"), \", no need to worry about them yet.\"), mdx(\"p\", null, \"In the material the whole structure might not be shown, unless purposefully needed. The example above could be represented also as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"Hello World!\\\");\\n\")), mdx(\"p\", null, \"in the future. In the exercises, for the first weeks the basic structure is given, so you do not have to worry about memorising it quite yet.\"), mdx(\"h2\", {\n    \"id\": \"printing\"\n  }, \"Printing\"), mdx(\"p\", null, \"As mentioned earlier, programming languages have statements built in them. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" is one of them. The statement is quite self-explanatory. It tells the computer to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"write a line to the console\"), \". You can change the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hello World!\"), \" to any text you wish, as long as the command itself is not changed, and it will work.\"), mdx(\"p\", null, \"The requirements in the exercises are very precise. If for example the line needs to end with an exclamation mark, it cannot be left out.\"), mdx(\"p\", null, \"Programs are created (and read) command by command, where every command has to be on their own line. In the next example, we are calling \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" twice, which means the print command is executed twice.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\");\\n        Console.WriteLine(\\\"... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"This would print\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello World!\\n... and Pietarsaari!\\n\")), mdx(\"p\", null, \"To be precise, the command \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine(\\\"example text\\\");\"), \" prints the text \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"example text\"), \" and a line change. The line change can also be handled with special character \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \", which is written as a part of the printable text. The example above could also be written as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\\n... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \" There is no empty space around the \\\\n. In a text, every character, even the empty ones, are part of the text. If you would put space around the line change, the first line would end with an empty character and the second one would start with one.\"), mdx(\"p\", null, \"Sometimes the texts can be quite long, and reading them from a single line can become quite difficult. It is possible to do split the string into multiple pieces and then concatenate them together with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"+\"), \" operator. The example above could be\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program {\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\\n\\\" +\\n        \\\"... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"This will print exactly the same information as previously. Compared to the first solution this is more efficient, as we have to call the print command only once. Compared to the second solution, this is easier to read.\"), mdx(\"p\", null, \"So far, everything we have printed have ended in a line change. If would want to print something but not change the line in the end, we would use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.Write(\\\"I do not change line\\\");\")), mdx(\"p\", null, \"Thus, there are two statements for printing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Console.WriteLine()\"), \" prints the text and changes line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Console.Write()\"), \" prints the text but keeps on the same line\")), mdx(\"p\", null, \"In the printed text, there can be special characters, such as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\\n\"), \". There are also \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Escape_character\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"other special characters (here)\")), \" you might want to familiarise yourself with.\"), mdx(\"h2\", {\n    \"id\": \"parameters-for-a-command\"\n  }, \"Parameters for a command\"), mdx(\"p\", null, \"When we want to print something, we have to give that information as a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"parameter\"), \" to our print command. Parameters are given to the command inside \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"()\"), \". For example, to print \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I like coding\"), \", we give the parameter inside quotes as follows: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.Write(\\\"I like coding\\\")\"), \".\"), mdx(\"h2\", {\n    \"id\": \"semicolon-separates-commands\"\n  }, \"Semicolon separates commands\"), mdx(\"p\", null, \"With a semicolon \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \";\"), \" statements are separated from each other. We could write our examples on a one line, but they would not be very readable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.Write(\\\"Hello \\\"); Console.Write(\\\"World!\\\"); Console.Write(\\\"\\\\n\\\");\\n\")), mdx(\"p\", null, \"This would print out\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello World!\\n\")), mdx(\"h2\", {\n    \"id\": \"code-blocks\"\n  }, \"Code blocks\"), mdx(\"p\", null, \"Code consists of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Code blocks\"), \". Code block means part of the code, separated with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"{}\"), \". There are usually multiple of these in a single program, as could already be seen from our basic structure.\"), mdx(\"p\", null, \"For example, the line \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public static void Main(string[] args)\"), \" that defines where to start the program, defines a block of what to run when the program is started.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{  // Here starts block for the class\\n\\n  public static void Main(string[] args)\\n  {  // Here starts block for the main\\n\\n  // Your code would be here\\n\\n  } // The main block ends\\n\\n} // The class block ends\\n\")), mdx(\"p\", null, \"The example shows a block inside another block. Blocks can be used to define the structure of a program. The block for the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"class\"), \" contains the whole program structure, whereas the block for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main\"), \" contains the source code that is run when the program is started.\"), mdx(\"p\", null, \"The block is always opened with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"{\"), \" and closed with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"}\"), \". If either of them is missing, the code will not compile, and thus will not run.\"), mdx(\"h2\", {\n    \"id\": \"comments\"\n  }, \"Comments\"), mdx(\"p\", null, \"As you might have noticed, we already have \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"comments\"), \" in our code. Comments are text that are not compiled and thus are not run. Comments can be used for example to comment certain elements in the code, or to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"temporarily\"), \" comment out part of a code for debugging purposes. There are two types of comments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"// single line comment\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/\", \"*\", \" multiple line comment \", \"*\", \"/\"))), mdx(\"p\", null, \"As you can see, the single line comment is started with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"//\"), \" but does not have an ending delimeter. Multiline comment starts with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/\", \"*\"), \" and ends with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"*\", \"/\"), \". Everything between these are considered as a comment by the compiler.\"), mdx(\"h2\", {\n    \"id\": \"code-style\"\n  }, \"Code style\"), mdx(\"p\", null, \"Even though there is no style restraint from computer or the language we have chosen, there is great advantage in keeping the code neat and easy to read. For every language, there are widely spread \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"coding conventions (here)\")), \". Indentation and variable naming conventions are the most useful ones to keep in mind.\"), mdx(\"p\", null, \"We could write our program as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{\\n    public static void Main(string[] args)\\n    {\\n        Console.WriteLine(\\\"Hello World!\\\\n\\\" +\\n        \\\"... and Pietarsaari!\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"As well as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program { public static void Main(string[] args) { Console.WriteLine(\\\"Hello World!\\\\n\\\" +\\n\\\"... and Pietarsaari!\\\");  }\\n                                        }\\n\")), mdx(\"p\", null, \"But as you can see, the latter is not as easy to read, and understanding for example the different code blocks is harder. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Keep your code neat and clean!\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"You can make your code more readable by using the keyboard shortcut ALT + SHIFT + F. This will automatically indent your code!\"), mdx(\"h2\", {\n    \"id\": \"printing-a-string\"\n  }, \"Printing a string\"), mdx(\"p\", null, \"Now that we have the tools for programming, let's go a bit deeper. so far we have printed simple lines of text. These texts are actually \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string literals\"), \". These literals can be saved into \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string variables\"), \". When we introduce a variable into a program, we usually give it a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"value\"), \". A value is given by following the variable with a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"=\"), \" sign, the value and ending the line again with a semicolon, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \";\"), \". For example, if we want a string variable called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"message\"), \" with a value of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I am learning\"), \", we would assign it with\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string message = \\\"I am learning\\\";\\n\")), mdx(\"p\", null, \"Creating a variable gives us an opportunity to reference to the variable inside the program. We could use our variable for printing:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string message = \\\"Print me\\\";\\nConsole.WriteLine(message);\\n\")), mdx(\"p\", null, \"And would get\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Print me\\n\")), mdx(\"p\", null, \"If we now would use quotes around our variable name, we would print it as a string literal.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string message = \\\"Print me\\\";\\nConsole.WriteLine(\\\"message\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"message\\n\")), mdx(\"p\", null, \"As we earlier combined multiple lines of text, the string variables can also be concatenated as a part of printing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string name = \\\"Doctor Octopus\\\";\\nConsole.WriteLine(\\\"We meet again, \\\" + name);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"We meet again, Doctor Octopus\\n\")), mdx(\"p\", null, \"Same can be done with multiple parts\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string name = \\\"Doctor Octopus\\\";\\nstring greeting = \\\"We meet again, \\\";\\nConsole.WriteLine(greeting + name + \\\"!\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"We meet again, Doctor Octopus!\\n\")), mdx(\"p\", null, \"We could also create a string variable from multiple literals:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string counting = \\\"One\\\" + \\\"\\\\n\\\" + \\\"Two\\\" + \\\"\\\\n\\\" + \\\"Three\\\";\\nConsole.WriteLine(counting);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"One\\nTwo\\nThree\\n\")), mdx(\"h2\", {\n    \"id\": \"reading-strings-from-user\"\n  }, \"Reading strings from user\"), mdx(\"p\", null, \"So far we have used strings that are written directly to the source code. It would be nice if we could tell our program, what we want to print each time. This can be done with another built in command, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadLine\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{\\n    public static void Main()\\n    {\\n    // Print a request for message.\\n    Console.Write(\\\"Give a message: \\\");\\n\\n    // Assign a new string variable. The value is the command we want to use.\\n    string message = Console.ReadLine();\\n\\n    // Print out the message we gave.\\n    Console.WriteLine(message);\\n    }\\n}\\n\")), mdx(\"p\", null, \"This will look something like this with imput \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I want to print this\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a message: I want to print this\\nI want to print this\\n\")), mdx(\"p\", null, \"This is the same example, but with concatenating the input message with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Your message was:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Program\\n{\\n   public static void Main()\\n   {\\n    // Print a request for message.\\n    Console.Write(\\\"Give a message: \\\");\\n\\n    // Assign a new string variable. The value is the command we want to use.\\n    string message = Console.ReadLine();\\n\\n    // Print out the message we gave.\\n    Console.WriteLine(\\\"Your message was: \\\" + message);\\n   }\\n}\\n\")), mdx(\"p\", null, \"This will look something like this with imput \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I want to print this\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a message: I want to print this\\nYour message was: I want to print this\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '001 Hello World!',\n    mdxType: \"Exercise\"\n  }, \"The basic structure of a program is given in the exercise:\", mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\nnamespace Exercise001\\n{\\n    class Program\\n    {\\n        public static void Main(string[] args)\\n        {\\n            // Add your code here:\\n            \\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"The line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\\\\\Add your code here:\"), \" is a comment. The composer does not compose it, so you do not have to worry about it. You can remove it, if you want.\"), mdx(\"p\", null, \"Create a program that writes the text \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello World!\"), \" into the console. The program contains the basic structure pictured above.\")), mdx(Exercise, {\n    title: '002 Bonnie Tyler',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Let's write some more. Bonnie Tyler once sang about feelings, that also apply to coding:  \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Once upon a time\\nI was falling in love\\nNow I'm only falling apart\\n\")), mdx(\"p\", null, \"Create a program which prints these lyrics using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \" three times.\")), mdx(Exercise, {\n    title: '003 Bonnie Tyler with line changes',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Let's refine our program. Print the same message:  \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Once upon a time\\nI was falling in love\\nNow I'm only falling apart\\n\")), mdx(\"p\", null, \"This time, use only one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \".\")), mdx(Exercise, {\n    title: '004 First variable',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise has following structure:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n \\nnamespace Exercise004\\n{\\n    public class Program\\n    {\\n        public static void Main(string[] args)\\n        {\\n            string message = \\\"Passport and floss!\\\";\\n            Console.WriteLine(message);\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Change it, so that it prints \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Passport and a toothbrush!\"), \"\\nDo not change the line containing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Console.WriteLine\"), \", only change the content of the variable!\")), mdx(Exercise, {\n    title: '005 Ada Lovelace',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"You will find following structure in the exercise:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\nnamespace Exercise005\\n{\\n    class Program\\n    {\\n        public static void Main(string[] args)\\n        {\\n            string name = \\\"Ada LoveLace\\\";\\n            // Write your code here:           \\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"Modify the code, so that it prints \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello Ada LoveLace!\"), \"\\nDo not modify the variable content!\")), mdx(Exercise, {\n    title: '006 Print input',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program, that asks user for a string. After the user has given the string (written text and pressed enter), the program will print the given line. Example output with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello\"), \" as input (input marked with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" for clarification):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give input!\\n> Hello\\nHello\\n\"))), mdx(Exercise, {\n    title: '007 Triple hello',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program, that asks user for a string. After the user has given the string (written text and pressed enter), the program will print the given line 3 times. Example output with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello\"), \" as input:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give input!\\n> Hello\\nHello\\nHello\\nHello\\n\"))), mdx(Exercise, {\n    title: '008 Greeting',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program, that asks user for their name and greets them. Example output with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ada\"), \" as input:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"What is your name?\\n> Ada\\nHello Ada!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Notice the exclamation mark.\")), mdx(Exercise, {\n    title: '009 Conversation',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program, that simulates a small conversation. The program will tell three lines, and expects two user inputs. Example output:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hello, how are you?\\n> Fine, thanks.\\nThat's interesting, tell me more\\n> I learn coding\\nThank you for sharing!\\n\"))), mdx(Exercise, {\n    title: '010 Name and profession',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create a program, that asks the user for a name and a profession. Then make the program to write a little story with this information. Here is an example story with inputs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ada\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Data Scientist\"), \".\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \" Every Ada and Data Scientist in the story are the inputs by the user. Remember to save the Console.ReadLines into variables and use them as parts of the story! \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"I will tell a story, but I need some information.\\nGive a name for main character:\\n> Ada\\nGive the character a profession:\\n> Data Scientist\\nHere is the story:\\nOnce upon a time there was a Data Scientist called Ada\\nOn her way to work, Ada often pondered what being Data Scientist meant to them.\\nWhen you work as a Data Scientist you meet interesting people.\\nAda enjoys their work as Data Scientist, The end.\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#printing","title":"Printing"},{"url":"#parameters-for-a-command","title":"Parameters for a command"},{"url":"#semicolon-separates-commands","title":"Semicolon separates commands"},{"url":"#code-blocks","title":"Code blocks"},{"url":"#comments","title":"Comments"},{"url":"#code-style","title":"Code style"},{"url":"#printing-a-string","title":"Printing a string"},{"url":"#reading-strings-from-user","title":"Reading strings from user"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Printing and reading"}}},"pageContext":{"id":"bb5a9617-4bdc-519c-b6b5-c6c54d6f88b7"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}