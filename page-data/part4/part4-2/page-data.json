{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part4/part4-2",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Objects in a list\",\n  \"nav_order\": 2,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The type parameter used in creating a list defines the type of the variables that are added to the list. For instance, List<string\", \">\", \" includes strings, List<int\", \">\", \" integers, and List<double\", \">\", \" floating point numbers.\"), mdx(\"p\", null, \"In the example below we first Add strings to a list, after which the strings in the list are printed one by one.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> names = new List<string>();\\n\\n// string can first be stored in a variable\\nstring betty = \\\"Betty Jennings\\\";\\n// then Add it to the list\\nnames.Add(betty);\\n\\n// strings can also be directly added to the list:\\nnames.Add(\\\"Betty Snyder\\\");\\nnames.Add(\\\"Frances Spence\\\");\\nnames.Add(\\\"Kay McNulty\\\");\\nnames.Add(\\\"Marlyn Wescoff\\\");\\nnames.Add(\\\"Ruth Lichterman\\\");\\n\\n// several different repeat statements can be\\n// used to go through the list elements\\n\\n// 1. while loop\\nint index = 0;\\nwhile (index < names.Count)\\n{\\n  Console.WriteLine(names[index]);\\n  index = index + 1;\\n}\\n\\n// 2. for loop with index\\nfor (int i = 0; i < names.Count; i++)\\n{\\n  Console.WriteLine(names[i]);\\n}\\n\\nConsole.WriteLine();\\n// 3. for each loop (no index)\\nforeach (string name in names)\\n{\\n  Console.WriteLine(name);\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-object-to-a-list\"\n  }, \"Adding object to a list\"), mdx(\"p\", null, \"Strings are objects, so it should come as no surprise that other kinds of objects can also be found in lists. Next, let's examine the cooperation of lists and objects in more detail.\"), mdx(\"p\", null, \"Let's assume we have access to the class defined below, describing a person.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  public string name { get; }\\n  public int age { get; set; }\\n  public int weight { get; set; }\\n  public int height { get; set; }\\n\\n  public Person(string name)\\n  {\\n    this.age = 0;\\n    this.weight = 0;\\n    this.height = 0;\\n    this.name = name;\\n  }\\n\\n  public double BodyMassIndex()\\n  {\\n    double heigthPerHundred = this.height / 100.0;\\n    return this.weight / (heigthPerHundred * heigthPerHundred);\\n  }\\n\\n  public void GrowOlder()\\n  {\\n    if (this.age < 100)\\n    {\\n      this.age = this.age + 1;\\n    }\\n  }\\n\\n  public bool IsOfLegalAge()\\n  {\\n    return this.age >= 18;\\n  }\\n\\n\\n  public override string ToString()\\n  {\\n    return this.name + \\\", age \\\" + this.age + \\\" years\\\";\\n  }\\n}\\n\")), mdx(\"p\", null, \"Handling objects in a list is not really different in any way from the previous experience we have with lists. The essential difference is only to define the type for the stored elements when you create the list.\"), mdx(\"p\", null, \"In the example below we first create a list meant for storing Person type object, after which we add persons to it. Finally the person objects are printed one by one.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // a person object can be created first\\n  Person john = new Person(\\\"John\\\");\\n  // and then added to the list\\n  persons.Add(john);\\n\\n  // person objects can also be created \\\"in the same sentence\\\" that they are added to the list\\n  persons.Add(new Person(\\\"Matthew\\\"));\\n  persons.Add(new Person(\\\"Martin\\\"));\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"John, age 0 years\\nMatthew, age 0 years\\nMartin, age 0 years\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-user-inputted-objects-to-a-list\"\n  }, \"Adding user-inputted objects to a list\"), mdx(\"p\", null, \"The structure we have learned earlier for reading inputs is still very useful.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // Read the names of persons from the user\\n  while (true)\\n  {\\n    Console.Write(\\\"Enter a name, empty will stop: \\\");\\n    String name = Console.ReadLine();\\n    if (name == \\\"\\\")\\n    {\\n      break;\\n    }\\n\\n\\n    // Add to the list a new person\\n    // whose name is the previous user input\\n    persons.Add(new Person(name));\\n  }\\n\\n  // Print the number of the entered persons, and their individual information\\n  Console.WriteLine();\\n  Console.WriteLine(\\\"Persons in total: \\\" + persons.Count);\\n  Console.WriteLine(\\\"Persons: \\\");\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter a name, empty will stop: Matt\\nEnter a name, empty will stop: Mike\\nEnter a name, empty will stop: Bob\\nEnter a name, empty will stop: \\n\\nPersons in total: 3\\nPersons: \\nMatt, age 0 years\\nMike, age 0 years\\nBob, age 0 years\\n\")), mdx(\"h2\", {\n    \"id\": \"multiple-constructor-parameters\"\n  }, \"Multiple constructor parameters\"), mdx(\"p\", null, \"If the constructor demands more than one parameters, you can query the user for more information. Let's assume we have the following constructor for the class \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person\\n{\\n  public string name { get; }\\n  public int age { get; set; }\\n  public int weight { get; set; }\\n  public int height { get; set; }\\n\\n  public Person(string name, int age)\\n  {\\n    this.age = age;\\n    this.name = name;\\n    this.weight = 0;\\n    this.height = 0;\\n  }\\n\\n  // Rest of the Person\\n}\\n\")), mdx(\"p\", null, \"In this case, an object is created by calling the two-parameter constructor.\"), mdx(\"p\", null, \"If we want to query the user for this kind of objects, they must be asked for each parameter separately. In the example below, name and age parameters are asked separately from the user. Entering an empty name will end the reading part.\"), mdx(\"p\", null, \"The persons are printed after they have been read.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // Read the names of persons from the user\\n  while (true)\\n  {\\n    Console.Write(\\\"Enter a name, empty will stop: \\\");\\n    String name = Console.ReadLine();\\n    if (name == \\\"\\\")\\n    {\\n      break;\\n    }\\n\\n    Console.Write(\\\"Enter the age of the person \\\" + name + \\\": \\\");\\n\\n    int age = Convert.ToInt32(Console.ReadLine());\\n\\n    // Add to the list a new person\\n    // whose name is the previous user input\\n    persons.Add(new Person(name, age));\\n  }\\n\\n  // Print the number of the entered persons, and their individual information\\n  Console.WriteLine();\\n  Console.WriteLine(\\\"Persons in total: \\\" + persons.Count);\\n  Console.WriteLine(\\\"Persons: \\\");\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter a name, empty will stop: Mike Modeler \\nEnter the age of the person Mike Modeler: 42\\nEnter a name, empty will stop: Nelson M\\nEnter the age of the person Nelson M: 1000\\nEnter a name, empty will stop: Harry Booter\\nEnter the age of the person Harry Booter: 1\\nEnter a name, empty will stop: \\n\\nPersons in total: 3\\nPersons: \\nMike Modeler, age 42 years\\nNelson M, age 1000 years\\nHarry Booter, age 1 years\\n\")), mdx(\"p\", null, \"In the example below, the required information was entered line by line. By no means is it impossible to ask for input in a specific format, e.g. separated by a comma.\"), mdx(\"p\", null, \"If the name and age were separated by a comma, the program could work in the following manner.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> persons = new List<Person>();\\n\\n  // Read the names of persons from the user\\n  while (true)\\n  {\\n    Console.WriteLine(\\\"Enter the person details separated by a comma, e.g.: Randall, 2\\\");\\n    string details = Console.ReadLine();\\n    if (details == \\\"\\\")\\n    {\\n      break;\\n    }\\n\\n    string[] parts = details.Split(\\\",\\\");\\n    string name = parts[0];\\n    int age = Convert.ToInt32(parts[1]);\\n    persons.Add(new Person(name, age));\\n  }\\n\\n  // Print the number of the entered persons, and their individual information\\n  Console.WriteLine();\\n  Console.WriteLine(\\\"Persons in total: \\\" + persons.Count);\\n  Console.WriteLine(\\\"Persons: \\\");\\n\\n  foreach (Person person in persons)\\n  {\\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter the person details separated by a comma, e.g.: Randall, 2\\nMatt, 23\\nEnter the person details separated by a comma, e.g.: Randall, 2\\nMike Pence, 3\\nEnter the person details separated by a comma, e.g.: Randall, 2\\n\\n\\nPersons in total: 2\\nPersons: \\nMatt, age 23 years\\nMike Pence, age 3 years\\n\")), mdx(\"h2\", {\n    \"id\": \"filtered-printing-from-the-list\"\n  }, \"Filtered printing from the list\"), mdx(\"p\", null, \"You can also examine the objects on the list as you go through it. In the example below, we first ask the user for an age restriction, after which we print all the objects whose age is at least the number given by the user.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Let's make a list with couple of entries\\nList<Person> persons = new List<Person>();\\npersons.Add(new Person(\\\"Martin\\\", 11));\\npersons.Add(new Person(\\\"Matthew\\\", 12));\\n\\n// Ask for age limit\\nConsole.Write(\\\"What is the age limit? \\\");\\nint ageLimit = Convert.ToInt32(Console.ReadLine());\\n\\n// Print only those who are above the limit\\nforeach (Person person in persons) {\\n  if (person.age >= ageLimit)\\n  { \\n    Console.WriteLine(person);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"What is the age limit? 12\\nMatthew, age 12 years\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '015 Main class',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Implement the class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" described here.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Do not modify the class Item.\"), mdx(\"p\", null, \"Write a program that reads names of items from the user. If the name is empty, the program stops reading. Otherwise, the given name is used to create a new item, which you will then add to the items list.\"), mdx(\"p\", null, \"Having read all the names, print all the items by using the ToString method of the Item class. The implementation of the Item class keeps track of the time of creation, in addition to the name of the item.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"The list has to be called \\\"items\\\" for the tests to work!\"), mdx(\"p\", null, \"Example print:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: Hammer\\nName: Radio\\nName: Hot Potato\\nName: \\n\\nHammer (created at: 9.2.2020 13.48.16)\\nRadio (created at: 9.2.2020 13.48.18)\\nHot Potato (created at: 9.2.2020 13.48.21)\\n\"))), mdx(Exercise, {\n    title: '016 Personal information',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The program described here should be implemented in the class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \". \"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Do not modify the class PersonalInformation.\"), mdx(\"p\", null, \"After the user has entered the last set of details (they enter an empty first name), exit the repeat statement. \"), mdx(\"p\", null, \"Print one empty line here for reading clarity.\"), mdx(\"p\", null, \"Then print the collected personal information so that each entered object is printed in the following format: first and last names separated by a space (you don't print the identification number). An example of the working program is given below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First name: \\n> Jean \\nLast name: \\n> Bartik \\nIdentification number: \\n> 271224 \\nFirst name: \\n> Betty \\nLast name: \\n> Holberton \\nIdentification number: \\n> 070317 \\nFirst name:\\n>\\n\\nJean Bartik \\nBetty Holberton\\n\")), mdx(\"p\", null, \"You can (and should) ask the identification number as a string.\")), mdx(Exercise, {\n    title: '017 Television guide',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"In the exercise template there is a ready-made class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TelevisionProgram\"), \", representing a television program. The class has object variables name and duration, a constructor, and a few methods.\"), mdx(\"p\", null, \"Implement a program (in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Main\"), \" class) that begins by reading television programs from the user. When the user inputs an empty string as the name of the program, the program stops reading programs.\"), mdx(\"p\", null, \"After this the user is queried for a maximum duration. Once the maximum is given, the program proceeds to list all the programs whose duration is smaller or equal to the specified maximum duration.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: Rick and Morty \\nDuration: 25 \\nName: Two and a Half Men \\nDuration: 30 \\nName: Love it or list it \\nDuration: 60 \\nName: House \\nDuration: 60\\nName:\\n\\nProgram's maximum duration? 30 \\nRick and Morty, 25 minutes \\nTwo and a Half Men, 30 minutes\\n\"))), mdx(Exercise, {\n    title: '018 Book class',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"This exercise is worth 2 points, without separate sections.\"), mdx(\"p\", null, \"Write a program which first reads book information from the user. The details to be asked for each book include the title, the number of pages, and the publication year. Entering an empty string as the name of the book ends the reading process.\"), mdx(\"p\", null, \"After this the user is asked for what is to be printed. If the user inputs \\\"everything\\\", all the details are printed: the book titles, the numbers of pages, and the publication years. However, if the user enters the string \\\"title\\\", only the book titles are printed. If something else than \\\"everything\\\" or \\\"title\\\" is given, the program should not print anything.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implement the class Book.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implement the functionality in the Main method.\")), mdx(\"p\", null, \"Example of how the program in Main should work:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"\\nName: To Kill a Mockingbird \\nPages: 281 \\nPublication year: 1960 \\nName: A Brief History of Time \\nPages: 256 \\nPublication year: 1988 \\nName: Beautiful Code \\nPages: 593 \\nPublication year: 2007 \\nName: The Name of the Wind \\nPages: 662 \\nPublication year: 2007 \\nName:\\n\\nWhat information will be printed? everything \\nTo Kill a Mockingbird, 281 pages, 1960 \\nA Brief History of Time, 256 pages, 1988 \\nBeautiful Code, 593 pages, 2007 \\nThe Name of the Wind, 662 pages, 2007\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: To Kill a Mockingbird \\nPages: 281 \\nPublication year: 1960 \\nName: A Brief History of Time \\nPages: 256 \\nPublication year: 1988 \\nName: Beautiful Code \\nPages: 593 \\nPublication year: 2007 \\nName: The Name of the Wind \\nPages: 662 \\nPublication year: 2007 \\nName:\\n\\nWhat information will be printed? title \\nTo Kill a Mockingbird \\nA Brief History of Time \\nBeautiful Code \\nThe Name of the Wind\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#adding-object-to-a-list","title":"Adding object to a list"},{"url":"#adding-user-inputted-objects-to-a-list","title":"Adding user-inputted objects to a list"},{"url":"#multiple-constructor-parameters","title":"Multiple constructor parameters"},{"url":"#filtered-printing-from-the-list","title":"Filtered printing from the list"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Objects in a list"}}},"pageContext":{"id":"0eb22145-c9db-5b2b-92c7-9c3c4179fc2f"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}