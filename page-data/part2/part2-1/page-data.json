{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part2/part2-1",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Subproblems\",\n  \"nav_order\": 1,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"reading-user-input\"\n  }, \"Reading user input\"), mdx(\"p\", null, \"The solution pattern for programming tasks involving reading user input is straightforward. We can use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Console.ReadLine();\"), \" command for this task. In most cases, we want to use the command more than once, or use other methods from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System\"), \" as well. For this, we will have \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System\"), \" in our program structure:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program\\n{\\n  public static void Main(string[] args)\\n  {\\n    Console.ReadLine();\\n    // More code...\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"In the material this basic structure is assumed to exist, and is not included in the example code.\"), mdx(\"h2\", {\n    \"id\": \"calculating\"\n  }, \"Calculating\"), mdx(\"p\", null, \"We quite often need to calculate something in a program, such as an average or a sum. The solution patter to solve such problems is as follows.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define the inputs required for the calculation and declare variables for them. Input refers to the values used in the calculation. You can typically identify the type of inputs from the problem description.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identify the operation needed, and declare a variable for the result of the calculation. Perform the calculation using the inputs, and assign the result to the variable that was reserved for it. The type of the result can also usually be identified from the problem description.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once the calculation is done, do something with its result. This can mean printing the result of a computation, or, for example, using it in calculating an average by dividing a sum of integers by their count.\")), mdx(\"p\", null, \"For example, the solution pattern for the problem \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Create a program to calculate the sum of two integers\"), \" is the following.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Identifying the input values and declaring the variables for them\\nint first = 1;\\nint second = 2;\\n\\n// Identifying the operation and declaring a variable for the result\\nint sum = first + second;\\n\\n// printing the result of the calculation\\nConsole.WriteLine(\\\"The sum of \\\" + first + \\\" and \\\" + second + \\\" is \\\" + sum);\\n\")), mdx(\"p\", null, \"A program that both reads and calculates combines both of these patterns. One that calculates the product of two integers provided by the use looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Identifying the input values and declaring the variables for them\\nint first = 1;\\nint second = 2;\\n\\n// Assigning the user input to the variables\\nfirst = Convert.ToInt32(Console.ReadLine());\\nsecond = Convert.ToInt32(Console.ReadLine());\\n\\n// Identifying the operation and declaring a variable for the result\\nint product = first * second;\\n\\n// Printing the result of the operation\\nConsole.WriteLine(\\\"The product of \\\" + first + \\\" and \\\" + second + \\\" is \\\" + product);\\n\")), mdx(\"p\", null, \"In the example above, the program has been implemented so that the variables are declared first after which values are read into them. Variable declaration and the reading of values into them can also be combined into one.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int first = Convert.ToInt32(Console.ReadLine());\\nint second = Convert.ToInt32(Console.ReadLine());\\n\\nint product = first * second;\\n\\nConsole.WriteLine(\\\"The product of \\\" + first + \\\" and \\\" + second + \\\" is \\\" + product);\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"some-alternative-functionality\"\n  }, \"Some alternative functionality\"), mdx(\"p\", null, \"Problems often contain some alternative functionality, and in such case we use conditional statements. A Conditional statement starts with an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if\"), \" command followed by an expression in parentheses. The expression evaluates to either true or false. If it evaluates true, the following block delimited by curly brackets gets executed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// if the value is greater than five\\nif (value > 5)\\n{\\n    // then...\\n}\\n\")), mdx(\"p\", null, \"A program that prints \\\"ok\\\" if the value of the variable is greater than 42, and otherwise prints \\\"not ok\\\" looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int value = 15;\\nif (value > 42)\\n{\\n    Console.WriteLine(\\\"ok\\\");\\n}\\nelse\\n{\\n    Console.WriteLine(\\\"not ok\\\");\\n}\\n\")), mdx(\"p\", null, \"You can also chain together multiple conditions. In such a case, the problem takes the form \\\"if a, then b; else if c, then d; else if e, then f; otherwise g\\\". The chain consists of an if-statement followed by else if-statements each containing its own expression and a block.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// if the value is greater than five\\nif (value > 5)\\n{\\n    // functionality when value is greater than five\\n}\\nelse if (value < 0)\\n{\\n    // functionality when value is less than zero\\n    // and the value IS NOT larger than five\\n}\\nelse // otherwise\\n{\\n    // functionality otherwise\\n}\\n\")), mdx(\"p\", null, \"Conditional functionality can be combined with other solution patterns. Let's look into a problem \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"Read two integers from the user. If the sum of the integers is over 100, print too much. If the sum is less than 0, print too little. Otherwise, print ok.\\\"\"), \" The program below combines reading, calculating and conditional functionality.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \" // Declaring the variables and assigning user input to them\\nint first = Convert.ToInt32(Console.ReadLine());\\nint second = Convert.ToInt32(Console.ReadLine());\\n\\n// Identifying the operation and declaring variable for the result\\nint sum = first + second;\\n\\n// Doing something with the result. In this case\\n// the result is used in the conditional operations.\\n\\nif (sum > 100) // if the sum is over 100\\n{\\n    Console.WriteLine(\\\"too much\\\");\\n}\\nelse if (sum < 0) // if the sum is less than 0\\n{\\n    Console.WriteLine(\\\"too little\\\");\\n}\\nelse // otherwise\\n{\\n    Console.WriteLine(\\\"ok\\\");\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '001 Second power',\n    mdxType: \"Exercise\"\n  }, \"Write a program that reads an integer from the user input, and then prints the second power of the given integer, i.e. the integer multiplied by itself.\", mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 4\\n16\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 5\\n25\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> -3\\n9\\n\"))), mdx(Exercise, {\n    title: '002 Square root of sum',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads two integers from the user, and prints the square root of the sum of these integers. The program does not need to work with negative values.\"), mdx(\"p\", null, \"You can get the square root of an integer with the command Math.Sqrt like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int number = 42;\\ndouble squareRoot = Math.Sqrt(number);\\nConsole.WriteLine(squareRoot);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 1 \\n> 0 \\n1\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 5 \\n> 4 \\n3\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 1 \\n> 35 \\n6\\n\"))), mdx(Exercise, {\n    title: '003 Absolute value',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program which reads an integer from the user. If the number is less than 0, it prints the number multiplied by -1. Otherwise the program prints the number itself. A few examples of the expected function below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> -3\\n3\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 1\\n1\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 0\\n0\\n\"))), mdx(Exercise, {\n    title: '004 Comparison',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads two integers from the user input. If the first number is greater than the second, the program prints \\\"(first) is greater than (second).\\\" If the first number is less than the second, the program prints \\\"(first) is less than (second).\\\" Otherwise the program prints \\\"(first) is equal to (second).\\\" The (first) and (second) should always be replaced with the actual numbers given by the user.\"), mdx(\"p\", null, \"A few examples of the expected behaviour:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 8 \\n> 4 \\n8 is greater than 4.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> -3 \\n> 5 \\n-3 is less than 5.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 1 \\n> 1 \\n1 is equal to 1.\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#reading-user-input","title":"Reading user input"},{"url":"#calculating","title":"Calculating"},{"url":"#some-alternative-functionality","title":"Some alternative functionality"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Subproblems"}}},"pageContext":{"id":"306cd9e5-6466-5e9f-9fcf-8c0dc70bbd79"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}