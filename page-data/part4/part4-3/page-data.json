{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part4/part4-3",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Files and reading data\",\n  \"nav_order\": 3,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A considerable amount of software is in one way or another based on handling data. Software created for playing music handles music files and those created for the purpose of image manipulation handle image files. Applications that run on the internet and mobile devices, such as Facebook, WhatsApp, and Telegram, handle user information that is stored in file-based databases. What these all have in common is that they read and manipulate data in one way or another. Also, the data being handled is ultimately stored in some format in one or more files.\"), mdx(\"h2\", {\n    \"id\": \"reading-from-the-keyboard\"\n  }, \"Reading From the Keyboard\"), mdx(\"p\", null, \"We've been using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console.ReadLine\"), \" since the beginning of this course to read user input. The block in which data is read has been a while-true loop where the reading ends at a specific input.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) {\\n    string line = Console.ReadLine();\\n\\n    if (line == \\\"end\\\") {\\n        break;\\n    }\\n\\n    // add the read line to a list for later\\n    // handling or handle the line immediately\\n\\n}\\n\")), mdx(\"p\", null, \"In text-based user interfaces, the input of the user is directed into the input stream one line at a time, which means that the information is sent to be handled every time the user enters a new line.\"), mdx(\"p\", null, \"The user input is read in string form. If we wanted to handle the input as integers, for instance, we'd have to convert it to another form. An example program has been provided below - it reads input from the user until the user inputs \\\"end\\\". As long as the user input is not \\\"end\\\" the inputs are handled as integers -- in this case, the number is simply printed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true) {\\n    string row = Console.ReadLine();\\n\\n    if (row == \\\"end\\\") {\\n        break;\\n    }\\n\\n    int number = Convert.ToInt32(row);\\n    Console.WriteLine(row);\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"files-and-the-filesystem\"\n  }, \"Files and the Filesystem\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Files\"), \" are collections of data that live in computers. These files can contain, among other things, text, images, music, or any combination of these. The file format determines the content of the file as well as the program required to read the file. For example, PDF files are read with a program suited for reading PDF files, and music files are read with a program suited for reading music files. Each of these programs is made by humans, and the creators of these programs -- i.e., programmers -- also specify the file format as part of the work.\"), mdx(\"p\", null, \"Computers have several different programs for browsing files. These programs are specific to the operating system. All programs used for browsing files make use of the filesystem of the computer in one way or another.\"), mdx(\"p\", null, \"Our development environment provides us with the ability to browse the files of a project. In Visual Studio Code, the whole project and all files associated can be seen in the list on the left side of the screen.\"), mdx(\"p\", null, \"Files exist on the hard drive of a computer, which is, in reality, a large set of ones and zeros, i.e., bits. Information is made up of these bits, e.g., one variable of type int takes up 32 bits (i.e., 32 ones or zeros). Modern terabyte-sized hard drives hold about 8 trillion bits (written out the number is 8,000,000,000,000). On this scale, a single integer is very small.\"), mdx(\"p\", null, \"Files can exist practically anywhere on a hard drive, even separated into multiple pieces. The computer's \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"filesystem\"), \" has the responsibility of keeping track of the locations of files on the hard drive as well as providing the ability to create new files and modify them. The filesystem's main responsibility is abstracting the true structure of the hard drive; a user or a program using a file doesn't need to care about the about how, or where, the file is actually stored.\"), mdx(\"h2\", {\n    \"id\": \"reading-from-a-file\"\n  }, \"Reading From a File\"), mdx(\"p\", null, \"Reading a file is done by using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File class\"), \", which can be found from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.IO\"), \". We will concentrate on text files, or files that include strings. \"), mdx(\"p\", null, \"In our examples (for now), we assume we have a files called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"text.txt\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"records.csv\"), \" in the same folder as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program.cs\"), \" is. The text.txt contains this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"This is a line\\nThis is second line\\nThis is 3rd\\nThis includes a double, 3.25\\nThis has \\\"quotes\\\"\\n\")), mdx(\"p\", null, \"And records.csv contains this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"sebastian,22\\nmatt,21\\nrebecca,23\\n\")), mdx(\"p\", null, \"There are several ways how to read a file. Here's (first) two of them:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"\\nusing System.IO;\\n\\nstatic void Main(string[] args)\\n{\\n  // Example #1\\n  // Read the file as one string.\\n  string text = File.ReadAllText(\\\"text.txt\\\");\\n\\n  // Display the file contents to the console. Variable text is a string.\\n  Console.WriteLine(\\\"This was done with ReadAllText.\\\");\\n  Console.WriteLine(text);\\n\\n  //Print empty line for easier reading\\n  Console.WriteLine();\\n\\n  // Example #2\\n  // Read each line of the file into a string array. \\n  //Each element of the array is one line of the file.\\n  Console.WriteLine(\\\"This was done with ReadAllLines.\\\");\\n  string[] lines = File.ReadAllLines(\\\"text.txt\\\");\\n\\n  // Display the file contents by using a foreach loop.\\n  foreach (string line in lines)\\n  {\\n    Console.WriteLine(line);\\n  }\\n}\\n\")), mdx(\"p\", null, \"This program prints out\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"This was done with ReadAllText.\\nThis is a line\\nThis is second line\\nThis is 3rd\\nThis includes a double, 3.25\\nThis has \\\"quotes\\\"\\n\\nThis was done with ReadAllLines.\\nThis is a line\\nThis is second line\\nThis is 3rd\\nThis includes a double, 3.25\\nThis has \\\"quotes\\\"\\n\")), mdx(\"p\", null, \"Let's look at both of them a bit deeper.\"), mdx(\"h3\", {\n    \"id\": \"filereadalltext\"\n  }, \"File.ReadAllText()\"), mdx(\"p\", null, \"The first example is quite self-explanatory. We declare a variable \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string text\"), \" and use the method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File.ReadAllText()\"), \" to read the textfile and save it to the variable. This saves the text from the file to the variable \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"as it is\"), \" in the file, including all the newlines. As you can see, when we print out the variable, it will print each line from the file to a separate line, as it should.\"), mdx(\"h3\", {\n    \"id\": \"filereadalllines\"\n  }, \"File.ReadAllLines()\"), mdx(\"p\", null, \"The second example is quite similar to the first one. Rather than saving the information from the file to a single string, we now save it to an array with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File.ReadAllLines()\"), \". Now each element in the array is a line from the text file.\"), mdx(\"p\", null, \"So what's the difference, why do we need two ways? When we want to have easy access to each individual line of the text, we would probably use the latter one. If all the text is saved into a single variable, then finding particular part from there would be more difficult. On the other hand, if we need to have the information in one piece, we would use the first one.\"), mdx(\"p\", null, \"There are also other ways of reading files, such as streams. We will get those later.\"), mdx(\"h2\", {\n    \"id\": \"reading-data-of-a-specific-format-from-a-file\"\n  }, \"Reading Data of a Specific Format From a File\"), mdx(\"p\", null, \"The world is full of data that are related to other data -- these form collection. For example, personal information includes name, date of birth, phone number. Address information, on the other hand, includes country, city, street address, postal number, and so on.\"), mdx(\"p\", null, \"Data is often stored in files using a specific format. One such format that's already familiar to us is comma-separated values (CSV) format, i.e., data separated by commas.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true)\\n{\\n  Console.WriteLine(\\\"Enter name and age separated by a comma:\\\");\\n  string input = Console.ReadLine();\\n  if (input == \\\"\\\")\\n  {\\n    break;\\n  }\\n  string[] pieces = input.Split(\\\",\\\");\\n  Console.WriteLine(\\\"Name: \\\" + pieces[0] + \\\", age: \\\" + pieces[1]);\\n}\\n\")), mdx(\"p\", null, \"The program works as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter name and age separated by a comma:\\nsebastian,22\\nName: sebastian, age: 22\\nEnter name and age separated by a comma:\\nmatt,21\\nName: matt, age: 21\\nEnter name and age separated by a comma:\\n\")), mdx(\"p\", null, \"Reading the same data from a file called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"records.csv\"), \" would look like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string[] lines = File.ReadAllLines(\\\"records.csv\\\");\\nforeach (string line in lines)\\n{\\n  string[] pieces = line.Split(\\\",\\\");\\n  Console.WriteLine(\\\"Name: \\\" + pieces[0] + \\\", age: \\\" + pieces[1]);\\n}\\n\")), mdx(\"p\", null, \"Which prints out\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name: sebastian, age: 22\\nName: matt, age: 21\\nName: rebecca, age: 23\\n\")), mdx(\"p\", null, \"As you can see, we now used the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadAllLines\"), \" method, as we needed to retrieve from each line separately. \"), mdx(\"p\", null, \"We could have used \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadAllText\"), \", but we would have had to first \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Split the string into an array\"), \" to be able to access all the lines... And as you can see, this way the array already exists, saving us from an extra step.\"), mdx(\"h2\", {\n    \"id\": \"reading-objects-from-a-file\"\n  }, \"Reading Objects From a File\"), mdx(\"p\", null, \"Creating objects from data that is read from a file is straightforward. Let's assume that we have a class called Person, as well as the data from before.\"), mdx(\"p\", null, \"Reading objects can be done like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  List<Person> people = new List<Person>();\\n\\n  string[] lines = File.ReadAllLines(\\\"records.csv\\\");\\n  foreach (string line in lines)\\n  {\\n    string[] pieces = line.Split(\\\",\\\");\\n    string name = pieces[0];\\n    int age = Convert.ToInt32(pieces[1]);\\n\\n    people.Add(new Person(name, age));\\n  }\\n  Console.WriteLine(\\\"Total amount read: \\\" + people.Count);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Total amount read: 3\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '019 Reading strings',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"As a recap, a simple program of reading the input.\"), mdx(\"p\", null, \"Write a program that reads strings from the user until the user inputs the string \\\"end\\\". At that point, the program should print how many strings have been read. The string \\\"end\\\" should not be included in the number strings read. You can find some examples below of how the program works.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> I \\n> have\\n> a\\n> feeling\\n> that\\n> I\\n> have\\n> written\\n> this\\n> wrong\\n> before\\n> end \\n11\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> end \\n0\\n\"))), mdx(Exercise, {\n    title: '020 Reading integers',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads strings from the user until the user inputs the string \\\"end\\\". As long as the input is not \\\"end\\\", the program should handle the input as an integer and print the cube of the number provided (i.e., number \", \"*\", \" number \", \"*\", \" number). Below are some sample outputs\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 3 \\n27 \\n> -1 \\n-1 \\n> 11 \\n1331 \\n> end\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> end\\n\")), mdx(\"p\", null, \"Remember to convert to integer before calculation!\")), mdx(Exercise, {\n    title: '021 Reading file',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that prints the contents of a file called \\\"data.txt\\\", such that each line of the file is printed on its own line.\"), mdx(\"p\", null, \"If the file content looks like so:\"), mdx(\"p\", null, \"In a world\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Where code is built   \"), mdx(\"p\", null, \"Then the program should print the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"In a world\\nWhere code is built\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"You can assume the file is in the same folder as your program.\")), mdx(Exercise, {\n    title: '022 File names',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that asks the user for a string, and then prints the contents of a file with a name matching the string provided. You may assume that the user provides a file name that the program can find. You do not have to worry about getting errors when the file does not exist.\"), mdx(\"p\", null, \"The exercise template contains the files \\\"data.txt\\\" and \\\"song.txt\\\", which you may use when testing the functionality of your program. The output of the program can be seen below for when a user has entered the string \\\"song.txt\\\". The content that is printed comes from the file \\\"song.txt\\\". Naturally, the program should also work with other filenames, assuming the file can be found.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Which file should have its contents printed? \\n> song.txt \\n\\nNo option for duality \\nThe old is where we come \\nClockspeed is fast, but we'll survive \\nThe new will overcome \\nWe are challengers, not followers \\nWe take the ball to build \\nEasy safe services \\nAre here to stay\\n\\nValue for society \\nValue for life \\nFor you and me \\nTieto is here allright!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"You can assume the file is in the same folder as your program.\")), mdx(Exercise, {\n    title: '023 Guestlist text file',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise template comes ready with functionality for the guest list application. It checks whether names entered by the user are on the guest list.\"), mdx(\"p\", null, \"However, the program is missing the functionality needed for reading the guest list. Modify the program so that the names on the guest list are read from the file.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"The exercise expects you to have a string called names where you store the file!\"), \"An example of the program use:\", mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Name of the file: \\n> guestlist.txt\\n\\nEnter names, an empty line quits. \\n> Chuck Norris \\nThe name is not on the list. \\n> Jack Baluer \\nThe name is not on the list. \\n> Jack Bauer \\nThe name is on the list. \\n> Jack Bower \\nThe name is on the list.\\n>\\nThank you!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"The exercise template comes with two files, names.txt and other-names.txt, which have the following contents. Do not change the contents of the files!\"), mdx(\"p\", null, \"names.txt:\"), mdx(\"p\", null, \"ada\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"arto\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"leena\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"test\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"heikki  \"), mdx(\"p\", null, \"other-names.txt:\"), mdx(\"p\", null, \"leo\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"jarmo\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"alicia\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"mike\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"potato  \"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"You can assume the files are in the same folder as your program.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#reading-from-the-keyboard","title":"Reading From the Keyboard"},{"url":"#files-and-the-filesystem","title":"Files and the Filesystem"},{"url":"#reading-from-a-file","title":"Reading From a File","items":[{"url":"#filereadalltext","title":"File.ReadAllText()"},{"url":"#filereadalllines","title":"File.ReadAllLines()"}]},{"url":"#reading-data-of-a-specific-format-from-a-file","title":"Reading Data of a Specific Format From a File"},{"url":"#reading-objects-from-a-file","title":"Reading Objects From a File"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Files and reading data"}}},"pageContext":{"id":"7299c8b0-a3d9-55a1-a4fa-07eab86d0e68"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}