{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part3/part3-2",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lists\",\n  \"nav_order\": 2,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In programming, we often encounter situations where we want to handle many values. The only method we've used so far has been to define a separate variable for storing each value. This is impractical.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string word1;\\nstring word2;\\nstring word3;\\n// ...\\nstring word10;\\n\")), mdx(\"p\", null, \"The solution presented above is useless in effect -- consider a situation in which there are thousands of words to store.\"), mdx(\"p\", null, \"Programming languages offer tools to assist in storing a large quantity of values. We will next take a peek at the List, which is used for storing many values that are of the same type.\"), mdx(\"p\", null, \"List is a pre-made tool in C# that helps dealing with lists. It offers various methods, including ones for adding values to the list, removing values from it, and also for the retrieval of a value from a specific place in the list. The concrete implementations -- i.e., how the list is actually programmed -- has beed abstracted behind the methods, so that a programmer making use of a list doesn't need to concern themselves with its inner workings.\"), mdx(\"h2\", {\n    \"id\": \"using-and-creating-lists\"\n  }, \"Using and Creating Lists\"), mdx(\"p\", null, \"For a List to be used, it first needs be imported into the program. This is achieved by including the command \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System.Collections.Generic;\"), \" at the top of the program. Below is an example program where an List is imported into the program.\"), mdx(\"p\", null, \"To use a List, it also has to be initialized. Below is an example where we create a List that holds integers, called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numbers\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System.Collections.Generic;\\n\\npublic class Program \\n{\\n    public static void Main(string[] args) \\n    {\\n      List<int> numbers = new List<int>();\\n      // Rest of the code...\\n    }\\n}\\n\\n\")), mdx(\"p\", null, \"Creating a new list is done with the command List<type\", \">\", \" list = new List<type\", \">\", \"(), where type is the type of the values to be stored in the list (e.g. int). We create a list for storing strings in the example below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> strings = new List<string>();\\n\")), mdx(\"p\", null, \"The type of the List variable is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List\"), \". When a list variable is initialized, the type of the values to be stored is also defined in addition to the variable type -- all the variables stored in a given list are of the same type. As such, the type of an List that stores strings is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List<string\", \">\"), \". A new list is created with the command new List<\", \">\", \"();.\"), mdx(\"h2\", {\n    \"id\": \"defining-the-type-of-values-that-a-list-can-contain\"\n  }, \"Defining the Type of Values That a List Can Contain\"), mdx(\"p\", null, \"When defining the type of values that a list can include, the type is written the same way as when declaring variables. A list that includes int-type variables has to be defined in the form \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List<int\", \">\"), \"; and a list that includes double-type variables is defined in the form \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List<double\", \">\"), \".\"), mdx(\"p\", null, \"You'll find examples below of creating lists that contain different types of values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> list = new List<int>();\\nlist.Add(1);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<double> list = new List<double>();\\nlist.Add(4.2);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<bool> list = new List<bool>();\\nlist.Add(true);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nlist.Add(\\\"String is text\\\");\\n\")), mdx(\"p\", null, \"Once a list has been created, List assumes that all the variables contained in it are of the correct type. Of course, you can store variables with the correct type in them, as well. Then the value of said variable is stored.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> integers = new List<int>();\\nint integer = 1;\\nintegers.Add(integer);\\n\\nList<double> doubles = new List<double>();\\ndouble d = 4.2;\\ndoubles.Add(d);\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-to-a-list-and-retrieving-a-value-from-a-specific-place\"\n  }, \"Adding to a List and Retrieving a Value from a Specific Place\"), mdx(\"p\", null, \"The next example demonstrates the addition of a few strings into an List containing strings. Addition is done with the list method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add\"), \", which takes the value to be added as a parameter. We then print the value at position zero. To retrieve a value from a certain position, you use a special annotation of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"list\", \"[index]\"), \", where list is your list, and index is the position from where to get the data. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordListExample \\n{\\n  public static void Main(string[] args) \\n  {\\n    // create the word list for storing strings\\n    List<string> wordList = new List<string>();\\n\\n    // add two values to the word list\\n    wordList.Add(\\\"First\\\");\\n    wordList.Add(\\\"Second\\\");\\n\\n    // retrieve the value from position 0 of the word list, and print it\\n    Console.WriteLine(wordList[0]);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Program writes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\n\")), mdx(\"p\", null, \"As can be seen, the latter method retrieves the first value from the list when it is given the parameter \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0\"), \". This is because list positions are counted starting from zero. The first value is found by wordList\", \"[0]\", \", the second by wordList\", \"[1]\", \", and so on.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordListExample \\n{\\n  public static void Main(string[] args) \\n  {\\n    // create the word list for storing strings\\n    List<string> wordList = new List<string>();\\n\\n    // add two values to the word list\\n    wordList.Add(\\\"First\\\");\\n    wordList.Add(\\\"Second\\\");\\n\\n    // retrieve the value from position 0 of the word list, and print it\\n    Console.WriteLine(wordList[1]);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Program writes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Second\\n\")), mdx(\"h2\", {\n    \"id\": \"retrieving-information-from-a-non-existent-place\"\n  }, \"Retrieving Information from a \\\"Non-Existent\\\" Place\"), mdx(\"p\", null, \"If you try to retrieve information from a place that does not exist on the list, the program will print a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentOutOfRangeException\"), \" error. In the example below, two values are added to a list, after which there is an attempt to print the value at place two on the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class WordListExample \\n{\\n  public static void Main(string[] args) \\n  {\\n    // create the word list for storing strings\\n    List<string> wordList = new List<string>();\\n\\n    // add two values to the word list\\n    wordList.Add(\\\"First\\\");\\n    wordList.Add(\\\"Second\\\");\\n\\n    // retrieve the value from position 0 of the word list, and print it\\n    Console.WriteLine(wordList[2]);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Since the numbering (i.e., indexing) of the list elements starts with zero, the program isn't able to find anything at place two and its execution ends with an error. Below is a description of the error message caused by the program.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Unhandled exception. System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index')\\n   at System.Collections.Generic.List`1.get_Item(Int32 index)\\n   at WordListExample.Program.Main(String[] args) in ... Program.cs:line 13\\n\")), mdx(\"p\", null, \"The error message tells exactly what and where happened. First, the error contains the error type, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentOutOfRangeException\"), \". Then it gives a possible correction. Next, the error contains which method caused the error. In this case, it would be the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"get_Item(Int32 index)\"), \". Last, the error tells us which part of our code triggered the error.\"), mdx(\"p\", null, \"As you can see, when calling for List\", \"[index]\", \", we are actually calling method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"System.Collections.Generic.List`1.get_Item(Int32 index)\"), \", which is a more complex method, already built in. This is the advantage of built-in methods: We do not have to worry about how to implement a method for data retrieval from a list, as it already exists.\"), mdx(\"h2\", {\n    \"id\": \"numbering-and-index\"\n  }, \"Numbering and index\"), mdx(\"p\", null, \"Numbering places, i.e., indexing, always begins with zero. The list's first value is located at index 0, the second value at index 1, the third value at index 2, and so on. In programs, an index is denoted with a variable called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i\"), \".\"), mdx(\"p\", null, \"Example list called numbers could contain something like this...\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"i\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"0\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"5\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"...\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  })))), mdx(\"p\", null, \"In the list above, the first value is 6 and the second value 1. If a new value was added to the list by calling the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add method\"), \" of numbers with 8 as parameter, the number 8 would be placed at index 6. It would be the seventh number in the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"numbers.Add(8);\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"i\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"0\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"5\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"...\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"right\"\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"6\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"2\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  }, \"8\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": \"center\"\n  })))), mdx(\"p\", null, \"Similarly, by calling the method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numbers\", \"[index]\"), \" with the parameter 4 the fifth number in the list would be retrieved.\"), mdx(\"p\", null, \"Each tool offered by C# has a name and location. The program can use a tool after it has been imported with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using\"), \" command. The command is given the location and the name of the desired class. For example, the use of a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console\"), \" from System necessitates placing the command \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System;\"), \" to the top of the program.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\n\\npublic class Program \\n{  \\n    public static void Main(string[] args) \\n    {  \\n        Console.WriteLine(\\\"Console has been imported\\\");\\n    }  \\n}   \\n\")), mdx(\"p\", null, \"The same usually applies to all C# classes. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console\"), \" is called directly from system, so we can import it with just \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System;\"), \". If we want to use Lists, we have to go deeper, and use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using System.Collections.Generic;\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\nusing System.Collections.Generic;\\n\\npublic class Program \\n{  \\n    public static void Main(string[] args) \\n    {  \\n        Console.WriteLine(\\\"Console has been imported\\\");\\n        List<string> list = new List<string>();\\n        list.Add(\\\"List can be now used, too.\\\");\\n    }  \\n}   \\n\")), mdx(\"h2\", {\n    \"id\": \"iterating-over-a-list\"\n  }, \"Iterating Over a List\"), mdx(\"p\", null, \"We'll next be examining methods that can be used to go through the values on a list. Let's start with a simple example where we print a list containing four values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nConsole.WriteLine(teachers[0]);\\nConsole.WriteLine(teachers[1]);\\nConsole.WriteLine(teachers[2]);\\nConsole.WriteLine(teachers[3]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Simon\\nSamuel\\nAnn\\nAnna\\n\")), mdx(\"p\", null, \"The example is obviously clumsy. What if there were more values on the list? Or fewer? What if we didn't know the number of values on the list?\"), mdx(\"p\", null, \"The number of values on a list is provided by the list's \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Count\"), \" property which returns the number of elements the list contains. The number is an integer (int), and it can be used as a part of an expression or stored in an integer variable for later use.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nConsole.WriteLine(\\\"Number of values on the list: \\\" + list.Count);\\n\\nlista.add(\\\"First\\\");\\nConsole.WriteLine(\\\"Number of values on the list: \\\" + list.Count);\\n\\nint values = list.Count;\\n\\nlista.add(\\\"Second\\\");\\nConsole.WriteLine(\\\"Number of values on the list: \\\" + values);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Number of values on the list: 0 \\nNumber of values on the list: 1 \\nNumber of values on the list: 1\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \" The Count is not a method but a property. This means that when calling Count, we do not add brackets in the end! \"), mdx(\"p\", null, \"Let's make a new version of the program that prints each index manually. In this intermediate version we use the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"index\"), \" variable to keep track of the place that is to be outputted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nint index = 0;\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 0\\n  index = index + 1; // index = 1\\n}\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 1\\n  index = index + 1; // index = 2\\n}\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 2\\n  index = index + 1; // index = 3\\n}\\n\\nif (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]); // index = 3\\n  index = index + 1; // index = 4\\n}\\n\\nif (index < index.Count) \\n{\\n  // this will not be executed since index = 4 and teachers.Count = 4\\n  Console.WriteLine(teachers[index]);\\n  index = index + 1;\\n}\\n\")), mdx(\"p\", null, \"We can see that there's repetition in the program above.\"), mdx(\"p\", null, \"We can convert the if statements into a while loop that is repeated until the condition index < teachers.Count no longer holds (i.e., the value of the variable index grows too great).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nint index = 0;\\n// Repeat for as long as the value of the variable `index`\\n// is smaller than the size of the teachers list\\nwhile (index < teachers.Count) \\n{\\n  Console.WriteLine(teachers[index]);\\n  index = index + 1;\\n}\\n\")), mdx(\"p\", null, \"Now the printing works regardless of the number of elements.\"), mdx(\"p\", null, \"The for-loop is extremely handy here. We can convert the loop above to a for-loop, after which the program looks like this.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nfor (int index = 0; index < teachers.Count; index++) \\n{\\n    Console.WriteLine(teachers[index]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Simon\\nSamuel\\nAnn\\nAnna\\n\")), mdx(\"p\", null, \"The index variable of the for-loop is typically labelled \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"for (int i = 0; i < teachers.Count; i++) \\n{\\n    Console.WriteLine(teachers[index]);\\n}\\n\")), mdx(\"p\", null, \"Let's consider using a list to store integers. The functionality is largely the same as in the previous example. The greatest difference has to do with the initialization of the list -- the type of value to be stored is defined as int, and the value to be printed is stored in a variable called number before printing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\n\\nnumbers.Add(1);\\nnumbers.Add(2);\\nnumbers.Add(3);\\nnumbers.Add(4);\\n\\nfor (int i = 0; i < numbers.Count; i++) \\n{\\n    int number = numbers[i];\\n    Console.WriteLine(number);\\n    // alternatively: Console.WriteLine(numbers[i]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n3\\n4\\n\")), mdx(\"p\", null, \"Printing the numbers in the list in reverse order would also be straightforward.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\n\\nnumbers.Add(1);\\nnumbers.Add(2);\\nnumbers.Add(3);\\nnumbers.Add(4);\\n\\nint index = numbers.Count - 1;\\nwhile (index >= 0)\\n{\\n  int number = numbers[index];\\n  Console.WriteLine(number);\\n  index = index - 1;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"4\\n3\\n2\\n1\\n\")), mdx(\"p\", null, \"Try and recreate the previous example with the for loop!\"), mdx(\"h2\", {\n    \"id\": \"iterating-over-a-list-with-a-for-each-loop\"\n  }, \"Iterating Over a List with a For-Each Loop\"), mdx(\"p\", null, \"If you don't need to keep track of the index as you're going through a list's values, you can make use of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for-each\"), \" loop. It differs from the previous loops in that it has no separate condition for repeating or incrementing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nforeach (string teacher in teachers)\\n{\\n  Console.WriteLine(teacher);\\n}\\n\")), mdx(\"p\", null, \"In practical terms, the for-each loop described above hides some parts of the for-loop we practiced earlier.The for-each loop would look like this if implemented as a for-loop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> teachers = new List<string>();\\n\\nteachers.Add(\\\"Simon\\\");\\nteachers.Add(\\\"Samuel\\\");\\nteachers.Add(\\\"Ann\\\");\\nteachers.Add(\\\"Anna\\\");\\n\\nfor (int i = 0; i < teachers.Count; i++) \\n{\\n    string teacher = teachers[i];\\n    Console.WriteLine(teacher);\\n}\\n\")), mdx(\"p\", null, \"In practice, the for-each loop examines the values of the list in order one at a time. The expression is defined in the following format: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"for (typeOfVariable nameOfVariable: nameOfList)\"), \", where \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"typeOfVariable\"), \" is the list's element type, and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nameOfVariable\"), \" is the variable that is used to store each value in the list as we go through it.\"), mdx(\"h2\", {\n    \"id\": \"removing-from-a-list-and-checking-the-existence-of-a-value\"\n  }, \"Removing from a List and Checking the Existence of a Value\"), mdx(\"p\", null, \"The list's \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RemoveAt(index)\"), \" method removes the value that is located at the index that's given as the parameter. The parameter is an integer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// create the list for storing strings\\nList<string> list = new List<string>();\\n\\n// add three values to the list\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\n\\n// Remove from index 1\\nlist.RemoveAt(1);\\n\\n// retrieve the value from positions 0 and 1 of the list, and print them\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nThird\\n\")), mdx(\"p\", null, \"We can also use the method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Remove\"), \" if we know the value of the item we want to remove:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// create the list for storing strings\\nList<string> list = new List<string>();\\n\\n// add three values to the list\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\n\\n// Remove with value \\\"Second\\\"\\nlist.Remove(\\\"Second\\\");\\n\\n// retrieve the value from positions 0 and 1 of the list, and print them\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nThird\\n\")), mdx(\"p\", null, \"The methods work exactly the same way with integers, so be careful, which method you use!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// create the list for storing integers\\nList<int> list = new List<int>();\\n\\n// add three values to the list\\nlist.Add(1);\\nlist.Add(3);\\nlist.Add(2);\\n\\n// Remove with value \\\"Second\\\"\\nlist.RemoveAt(1);\\n\\n// retrieve the value from positions 0 and 1 of the list, and print them\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// create the list for storing integers\\nList<int> list = new List<int>();\\n\\n// add three values to the list\\nlist.Add(1);\\nlist.Add(3);\\nlist.Add(2);\\n\\n// Remove with value \\nlist.Remove(1);\\n\\n// retrieve the value from positions 0 and 1 of the list, and print them\\nConsole.WriteLine(list[0]);\\nConsole.WriteLine(list[1]);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"3\\n2\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \" The method Remove removes the first match it finds. So, if your list would contain multiples of the same value, only the first one would be removed! \"), mdx(\"p\", null, \"The list method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Contains\"), \" can be used to check the existence of a value in the list. The method receives the value to be searched as its parameter, and it returns a boolean type value (True or False) that indicates whether or not that value is stored in the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// create the list for storing strings\\nList<string> list = new List<string>();\\n\\n// add three values to the list\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\n\\nConsole.WriteLine(\\\"Can we find First: \\\" + list.Contains(\\\"First\\\"));\\n\\n\\nif (list.Contains(\\\"Second\\\"))\\n{\\n  Console.WriteLine(\\\"We found second!\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Can we find First: True\\nWe found second!\\n\")), mdx(\"h2\", {\n    \"id\": \"list-as-a-method-parameter\"\n  }, \"List as a Method Parameter\"), mdx(\"p\", null, \"Like other variables, a list, too, can be used as a parameter to a method. When the method is defined to take a list as a parameter, the type of the parameter is defined as the type of the list and the type of the values contained in that list. Below, the method \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Print\"), \" prints the values in the list one by one.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Print(List<String> list)\\n{\\n  foreach (string value in list)\\n  {\\n    Console.WriteLine(value);\\n  }\\n}\\n\")), mdx(\"p\", null, \"We're by now familiar with methods, and it works in the same way here. In the example below we use the method that was implemented above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> strings = new List<string>();\\n\\nstrings.Add(\\\"First\\\");\\nstrings.Add(\\\"Second\\\");\\nstrings.Add(\\\"Third\\\");\\n\\nPrint(strings);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nSecond\\nThird\\n\")), mdx(\"p\", null, \"The chosen parameter in the method definition is not dependent on the list that is passed as parameter in the method call. In the program that calls Print, the name of the list variable is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string\"), \", but inside the method Print the variable is called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"list\"), \" -- the name of the variable that stores the list could also be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"printables\"), \", for instance.\"), mdx(\"p\", null, \"It's also possible to define multiple variables for a method. In the example the method receives two parameters: a list of numbers and a threshold value. It then prints all the numbers in the list that are smaller than the second parameter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void PrintSmallerThan(List<int> numbers, int threshold) \\n{\\n  foreach(int number in numbers)\\n  {\\n    if (number < threshold) \\n    {\\n      Console.WriteLine(number);\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Here we see it in action:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> list = new List<int>();\\n\\nlist.Add(1);\\nlist.Add(2);\\nlist.Add(3);\\nlist.Add(2);\\nlist.Add(1);\\n\\nPrintSmallerThan(list, 3);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n2\\n2\\n1\\n\")), mdx(\"p\", null, \"As before, a method can also return a value. The methods that return values have the type of the return value in place of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"void\"), \" keyword, and the actual returning of the value is done by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" command. The method below returns the Count of the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Count(List<string> list)\\n{\\n  return list.Count;\\n}\\n\")), mdx(\"p\", null, \"You can also define own variables for methods. The method below calculates the average of the numbers in the list. If the list is empty, it returns the number -1.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static double Average(List<int> numbers) \\n{\\n  if (numbers.Count == 0) \\n  {\\n      return -1.0;\\n  }\\n\\n  int sum = 0;\\n  foreach(int number in numbers) \\n  {\\n      sum = sum + number;\\n  }\\n\\n  return 1.0 * sum / numbers.Count;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"on-copying-the-list-to-a-method-parameter\"\n  }, \"On Copying the List to a Method Parameter\"), mdx(\"p\", null, \"Earlier we have used integers, floating point numbers, etc. as method parameters. When variables such as int are used as method parameters, the value of the variable is copied for the method's use. The same occurs in the case that the parameter is a list.\"), mdx(\"p\", null, \"Lists, among practically all the variables that can store large amounts of information, are reference-type variables. This means that the value of the variable is a reference that points to the location that contains the information.\"), mdx(\"p\", null, \"When a list (or any reference-type variable) is copied for a method's use, the method receives the value of the list variable, i.e., a reference. In such a case the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"method receives a reference to the real value of a reference-type variable\"), \", and the method is able to modify the value of the original reference type variable, such as a list. In practice, the list that the method receives as a parameter is the same list that is used in the program that calls the method.\"), mdx(\"p\", null, \"Let's look at this briefly with the following method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void RemoveFirst(List<int> numbers)\\n{\\nif (numbers.Count == 0)\\n{\\nreturn;\\n}\\nnumbers.RemoveAt(0);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\nnumbers.Add(6);\\nnumbers.Add(-1);\\n\\nConsole.WriteLine(\\\"First print: \\\");\\nnumbers.ForEach(Console.WriteLine);\\n\\nRemoveFirst(numbers);\\n\\nConsole.WriteLine(\\\"Second print: \\\");\\nnumbers.ForEach(Console.WriteLine);\\n\\nRemoveFirst(numbers);\\nRemoveFirst(numbers);\\nRemoveFirst(numbers);\\n\\nConsole.WriteLine(\\\"Third print: \\\");\\nnumbers.ForEach(Console.WriteLine);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First print: \\n3\\n2\\n6\\n-1\\nSecond print: \\n2\\n6\\n-1\\nThird print: \\n\")), mdx(\"p\", null, \"As you can see, the methor \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"RemoveFirst\"), \" affects the list it was given as a parameter, directly.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Instead of doing Console.WriteLine(numbers), to get the values from the list, the annotation is numbers.ForEach(Console.WriteLine); \"), mdx(\"h2\", {\n    \"id\": \"a-summary-of-list-methods-and-properties\"\n  }, \"A Summary of List Methods and Properties\"), mdx(\"p\", null, \"You can find all the information about \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.8\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Lists here\")), \". For the most part, we don't need all that information, but a hand selected part from it.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding to a list is done with the method *Add** that receives the value to be added as a parameter.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The number of elements in a list can be discovered with the property \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Count\"), \"; it returns an integer.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nint amount = numbers.Count;\\nConsole.WriteLine(\\\"Amount of integers in numbers: \\\" + amount);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can retrieve a value from a certain index with the method \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"list\", \"[index]\"), \" that is given the index at which the value resides as a parameter.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nConsole.WriteLine(numbers[0]);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Removing elements is done with either \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Remove\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"RemoveAt\"), \", depending if we remove by value or index.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nlist.Add(\\\"First\\\");\\nlist.Add(\\\"Second\\\");\\nlist.Add(\\\"Third\\\");\\nlist.RemoveAt(0);\\nlist.Remove(\\\"Third\\\");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Checking for the existence of a value is done with the method \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Contains\"), \". It's provided the value being searched for as a parameter, and it returns a boolean value.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> list = new List<string>();\\nlist.Add(\\\"First\\\");\\nlist.Contains(\\\"First\\\");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To iterate a list, we use forEach\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\n\\nnumbers.ForEach(Console.WriteLine);\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '001 Third from list',\n    mdxType: \"Exercise\"\n  }, \"The exercise contains a base that asks the user for strings and adds them to a list. The program stops reading when the user enters an empty string. The program then prints the first element of the list.\", mdx(\"p\", null, \"Your assignment is to modify the program so that instead of the first value, the third value on the list is printed. Remember that programmers start counting from zero! The program is allowed to malfunction if there are fewer than three entries on the list, so you don't need to prepare for such an event at all.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nAlex\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Emma \\n> Alex \\n> Mary\\n>\\n\\nMary\\n\"))), mdx(Exercise, {\n    title: '002 Sum of second and third',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"In the exercise template there is a program that reads integers from the user and adds them to a list. This ends when the user enters 0. The program then prints the first value on the list.\"), mdx(\"p\", null, \"Modify the program so that instead of the first value, the program prints the sum of the second and third numbers. The program is allowed to malfunction if there are fewer than three entries on the list, so you don't need to prepare for such an event at all.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 1 \\n> 3 \\n> 5 \\n> 7 \\n> 0 \\n8\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 2 \\n> 3 \\n> 4 \\n> 0 \\n7\\n\"))), mdx(Exercise, {\n    title: '003 Exception',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"There is a program that uses a list in the exercise template. Modify it so that its execution always produces the error \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ArgumentOutRangeException\"), \". The user should not have to give any inputs to the program (e.g. write something on the keyboard)\")), mdx(Exercise, {\n    title: '004 Counting names',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"In the exercise template is a program that reads input from the user. Modify its working so that when the program quits reading (with an empty line), the program prints the number of values on the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nIn total: 4\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Juno \\n> Elizabeth \\n> Mason \\n> Irene\\n> Olivia\\n> Liam\\n> Ida\\n> Christopher\\n> Mark\\n> Sylvester\\n> Oscar\\n>\\nIn total: 11\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Be sure to use the Count property of the list.\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"The next exercises are meant for learning to use lists and indices. Even if you could complete the execises without a list, concentrate on training to use lists. The functionality in the exercises is to be implemented after reading the inputs.\"), mdx(Exercise, {\n    title: '005 Last from list',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"In the exercise template there is a program that reads inputs from the user and adds them to a list. Reading is stopped once the user enters an empty string.\"), mdx(\"p\", null, \"Your task is to modify the method to print the last read value after it stops reading. Print the value that was read last from the list. Use the Count to help you. You do not have to take into consideration empty lists, you can assume that the user always gives at least one input.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nMary\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Juno \\n> Elizabeth \\n> Mason \\n> Irene\\n> Olivia\\n> Liam\\n> Ida\\n> Christopher\\n> Mark\\n> Sylvester\\n> Oscar\\n>\\nOscar\\n\"))), mdx(Exercise, {\n    title: '006 First and last',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"In the exercise template there is a program that reads inputs from the user and adds them to a list. Reading is stopped once the user enters an empty string.\"), mdx(\"p\", null, \"Modify the program to print both the first and the last values after the reading ends. You may suppose that at least two values are read into the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Emma \\n> Alex \\n> Mary\\n>\\nTom\\nMary\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Juno \\n> Elizabeth \\n> Mason \\n> Irene\\n> Olivia\\n> Liam\\n> Ida\\n> Christopher\\n> Mark\\n> Sylvester\\n> Oscar\\n>\\nJuno\\nOscar\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> Tom \\n> Mary\\n>\\nTom\\nMary\\n\"))), mdx(Exercise, {\n    title: '007 Numbers from list',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise template contains a base that reads numbers from the user and adds them to a list. Reading is stopped once the user enters the number -1.\"), mdx(\"p\", null, \"Expand the functionality of the program so that after reading the numbers, it prints all the numbers received from the user. The number used to indicate stopping should not be printed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 11\\n> -1 \\n72\\n2\\n8\\n11\\n\"))), mdx(Exercise, {\n    title: '008 Numbers from and to',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise template contains a base that reads numbers from the user and adds them to a list. Reading is stopped once the user enters the number -1.\"), mdx(\"p\", null, \"Expand the program to ask for a start and end values once it has finished asking for numbers. After this the program shall prints all the numbers in the list that fall in the specified range (between the values given by the user, inclusive). You may assume that the user gives values that match some numbers in the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 11\\n> -1 \\nFrom where?\\n> 1\\nWhere to?\\n> 9 \\n2 \\n8\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 8\\n> 2\\n> 11\\n> -1 \\nFrom where?\\n> 0 \\nWhere to?\\n> 20  \\n8\\n2\\n11 \\n\"))), mdx(Exercise, {\n    title: '009 Greatest number',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise template contains a base that reads numbers from the user and adds them to a list. Reading is stopped once the user enters the number -1.\"), mdx(\"p\", null, \"Continue developing the program so that it ends the greatest number in the list and prints its value after reading all the numbers. The programming should work in the following manner.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 93\\n> 11\\n> -1\\nThe greatest number: 93\\n\")), mdx(\"p\", null, \"You can assume that user always gives atleast one viable number.\"), mdx(\"p\", null, \"You can use the source code below as an inspitation. It is used to find the smallest number.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// assume we have a list that contains integers\\n\\nint smallest = list[0];\\n\\nfor(int i = 0; i < list.Count; i++) {\\n    int number = list[i];\\n    if (smallest > number) {\\n        smallest = number;\\n    }\\n}\\n\\nConsole.WriteLine(\\\"The smallest number: \\\" + smallest);\\n\"))), mdx(Exercise, {\n    title: '010 Index',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise template contains a base that reads numbers from the user and adds them to a list. Reading is stopped once the user enters the number -1.\"), mdx(\"p\", null, \"Expand the program that then asks the user for a number, and reports that number's index in the list. If the number is not found, the program should not print anything.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72 \\n> 2 \\n> 8 \\n> 8 \\n> 11 \\n> -1\\nSearch for? \\n> 2 \\n2 is at index 1\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72 \\n> 2 \\n> 8 \\n> 8 \\n> 11 \\n> -1\\nSearch for? \\n> 8 \\n8 is at index 2\\n8 is at index 3\\n\"))), mdx(Exercise, {\n    title: '011 Smallest and index',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads numbers from the user. When number 9999 is entered, the reading process stops. After this the program will print the smallest number in the list, and also the indices where that number is found. Notice: the smallest number can appear multiple times in the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 8\\n> 11\\n> 9999\\nSmallest number: 2 \\nFound at index: 1\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 44\\n> 8\\n> 8\\n> 11\\n> 9999\\nSmallest number: 8 \\nFound at index: 2 \\nFound at index: 3\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \" You can combine the programs you wrote for the exercises \\\"Greatest number in the list\\\" and \\\"Index of the requested number\\\". First find the smallest number, and then find the index of that number. \")), mdx(Exercise, {\n    title: '012 Sum of list',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"The exercise template contains a base that reads numbers from the user and adds them to a list. Reading is stopped once the user enters the number -1.\"), mdx(\"p\", null, \"Modify the program so that after reading the numbers it calculates and prints the sum of the numbers in the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> 72\\n> 2\\n> 8\\n> 11\\n> -1\\nSum: 93\\n\"))), mdx(Exercise, {\n    title: '013 Finding names',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"In the exercise template there is a program that reads inputs from the user until an empty string is entered. Add the following functionality to it: after reading the inputs one more string is requested from the user. The program then tell whether that string was found in the list or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Tom\\n> Emma\\n> Alex\\n> Mary\\nSearch for?\\n> Mary\\nMary was found!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"> Tom\\n> Emma\\n> Alex\\n> Mary\\nSearch for?\\n> Logan\\nLogan was not found!\\n\"))), mdx(Exercise, {\n    title: '014 Numbers in range',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void PrintNumbersInRange(List<int> numbers, int lowerLimit, int upperLimit)\"), \" in the exercise template. The method prints the numbers in the given list whose values are in the range \", \"[lowerLimit, upperLimit]\", \". A few examples of using the method are supplied below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\nnumbers.Add(6);\\nnumbers.Add(-1);\\nnumbers.Add(5);\\nnumnbers.Add(1);\\n\\nConsole.WriteLine(\\\"The numbers in the range [0, 5]\\\");\\nPrintNumbersInRange(numbers, 0, 5);\\n\\nConsole.WriteLine(\\\"The numbers in the range [3, 10]\\\");\\nPrintNumbersInRange(numbers, 3, 10);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"The numbers in the range [0, 5] \\n3 \\n2 \\n5 \\n1 \\nThe numbers in the range [3, 10] \\n3 \\n6 \\n5\\n\"))), mdx(Exercise, {\n    title: '015 Sum method',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Create the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static int Sum(List<int> numbers)\"), \" in the exercise template. The method is to return the sum of the numbers in the parameter list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(3);\\nnumbers.Add(2);\\nnumbers.Add(6);\\nnumbers.Add(-1);\\nConsole.WriteLine(Sum(numbers));\\n\\nnumbers.Add(5);\\nnumbers.Add(1);\\nConsole.WriteLine(Sum(numbers));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"10\\n16\\n\"))), mdx(Exercise, {\n    title: '016 Remove last method',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"create the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public static void RemoveLast(List<string> strings)\"), \" in the exercise template. The method should remove the last value in the list it receives as a parameter. If the list is empty, the method does nothing.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<string> strings = new List<string>();\\n\\nstrings.Add(\\\"First\\\");\\nstrings.Add(\\\"Second\\\");\\nstrings.Add(\\\"Third\\\");\\n\\n// Remember, this is how you print all the items in a list\\nstrings.ForEach(Console.WriteLine);\\n\\nRemoveLast(strings);\\nRemoveLast(strings);\\n\\nstrings.ForEach(Console.WriteLine);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"First\\nSecond\\nThird\\nFirst\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#using-and-creating-lists","title":"Using and Creating Lists"},{"url":"#defining-the-type-of-values-that-a-list-can-contain","title":"Defining the Type of Values That a List Can Contain"},{"url":"#adding-to-a-list-and-retrieving-a-value-from-a-specific-place","title":"Adding to a List and Retrieving a Value from a Specific Place"},{"url":"#retrieving-information-from-a-non-existent-place","title":"Retrieving Information from a \"Non-Existent\" Place"},{"url":"#numbering-and-index","title":"Numbering and index"},{"url":"#iterating-over-a-list","title":"Iterating Over a List"},{"url":"#iterating-over-a-list-with-a-for-each-loop","title":"Iterating Over a List with a For-Each Loop"},{"url":"#removing-from-a-list-and-checking-the-existence-of-a-value","title":"Removing from a List and Checking the Existence of a Value"},{"url":"#list-as-a-method-parameter","title":"List as a Method Parameter"},{"url":"#on-copying-the-list-to-a-method-parameter","title":"On Copying the List to a Method Parameter"},{"url":"#a-summary-of-list-methods-and-properties","title":"A Summary of List Methods and Properties"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Lists"}}},"pageContext":{"id":"dc2bbbbb-b18c-58fc-b23c-7dd6a167d7af"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}