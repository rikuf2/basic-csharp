{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part3/part3-4",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Strings\",\n  \"nav_order\": 4,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let's first revise what we already know about strings and see how to split them. Below we create a string variable magicWord, that contains value \\\"abracadabra\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string magicWord = \\\"abracadabra\\\";\\n\")), mdx(\"p\", null, \"Passing a string as a parameter to a print command (or, for that matter, any method that takes a string parameter) happens in the familiar way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string magicWord = \\\"abracadabra\\\";\\nConsole.WriteLine(magicWord);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"abracadabra\\n\")), mdx(\"h2\", {\n    \"id\": \"reading-and-printing-strings\"\n  }, \"Reading and Printing Strings\"), mdx(\"p\", null, \"You can read a string using the ReadLine-method offered by Console. The program below reads the name of the user and prints it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"What's your name?\\\");\\n// reading a line from the user and assigning it to the name variable\\nstring name = Console.ReadLine();\\n\\nConsole.WriteLine(name);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"What's your name?\\n> Hank\\nHank\\n\")), mdx(\"p\", null, \"Strings can also be concatenated. If you place a +-operator between two strings, you get a new string that's a combination of those two strings. Be mindful of any white spaces in your variables!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string greeting = \\\"Hi \\\";\\nstring name = \\\"Lily\\\";\\nstring goodbye = \\\" and see you later!\\\";\\n\\nstring phrase = greeting + name + goodbye;\\n\\nConsole.WriteLine(phrase);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Hi Lily and see you later!\\n\")), mdx(\"h2\", {\n    \"id\": \"string-comparisons\"\n  }, \"String comparisons\"), mdx(\"p\", null, \"Strings can be compared with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"==\"), \" just like any other variable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string text = \\\"Hello\\\";\\nstring word = \\\"Hullo\\\";\\n\\nif (text == word)\\n{\\n  Console.WriteLine(\\\"Hooray!\\\");\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"Boo\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Boo\\n\")), mdx(\"p\", null, \"As we've come to know, a boolean value can be inverted through negation - \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"!\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string text = \\\"Hello\\\";\\nstring word = \\\"Hullo\\\";\\n\\nif (!(text == word))\\n{\\n  Console.WriteLine(\\\"Boo!\\\");\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"Hooray!\\\");\\n}\\n\")), mdx(\"p\", null, \"Or by negating the comparison\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string text = \\\"Hello\\\";\\nstring word = \\\"Hullo\\\";\\n\\nif (text != word)\\n{\\n  Console.WriteLine(\\\"Boo!\\\");\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"Hooray!\\\");\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"splitting-a-string\"\n  }, \"Splitting a String\"), mdx(\"p\", null, \"You can split a string to multiple pieces with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Split-method\"), \" of the string class. The method takes as a parameter a string denoting the place around which the string should be split. The split method returns an array of the resulting sub-parts. In the example below, the string has been split around a space.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string text = \\\"first second third fourth\\\";\\nstring[] pieces = text.Split(\\\" \\\");\\nConsole.WriteLine(pieces[0]);\\nConsole.WriteLine(pieces[1]);\\nConsole.WriteLine(pieces[2]);\\nConsole.WriteLine(pieces[3]);\\n\\n// For empty line print\\nConsole.WriteLine();\\n\\nfor (int i = 0; i < pieces.Length; i++)\\n{\\n  Console.WriteLine(pieces[i]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"first\\nsecond\\nthird\\nfourth\\n\\nfirst\\nsecond\\nthird\\nfourth\\n\")), mdx(\"h2\", {\n    \"id\": \"data-of-fixed-format\"\n  }, \"Data of Fixed Format\"), mdx(\"p\", null, \"Splitting strings is used particularly when the data is of a fixed format. This refers to data that adheres to some predefined format. An example of this of this is the comma-separated values (csv) format, where commas are used to separate values. Below you'll find an example of data in csv form containing names and ages. The first column contains names and the second one ages. The columns are separed by a comma.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"sebastian,2 \\nlucas,2 \\nlily,1\\n\")), mdx(\"p\", null, \"Let's assume the user enters the data above row by row, ending with an empty line.\"), mdx(\"p\", null, \"A program to print the names and ages looks like the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"while (true)\\n{\\n  string input = Console.ReadLine();\\n  if (input == \\\"\\\")\\n  {\\n    break;\\n  }\\n  string[] pieces = input.Split(\\\",\\\");\\n  Console.WriteLine(\\\"Name: \\\" + pieces[0] + \\\", age: \\\" + pieces[1]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> sebastian,2 \\nName: sebastian, age: 2 \\n> lucas,2 \\nName: lucas, age: 2 \\n> lily,1 \\nName: lily, age: 1\\n\")), mdx(\"h2\", {\n    \"id\": \"using-diverse-text\"\n  }, \"Using Diverse Text\"), mdx(\"p\", null, \"We've printed strings in the examples above. Some of the data contained in a fixed-format string can be numerical. In the previous data we used that contained names and ages, the ages were integers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"sebastian,2 \\nlucas,2 \\nlily,1\\n\")), mdx(\"p\", null, \"Splitting a string always produces an array of strings. If the text is of fixed format, we can assume the data in a specific index to always be of the a specific type -- e.g., in the example above, age at index 1 is an integer.\"), mdx(\"p\", null, \"The program below computes the sum of ages in this fixed format data. In order to compute the sum, the age must first be converted to a number (the familiar command Convert.ToInt32).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int sum = 0;\\n\\nwhile (true)\\n{\\n  string input = Console.ReadLine();\\n  if (input == \\\"\\\")\\n  {\\n    break;\\n  }\\n  string[] parts = input.Split(\\\",\\\");\\n  sum = sum + Convert.ToInt32(parts[1]);\\n}\\nConsole.WriteLine(\\\"Sum of the ages is \\\" + sum);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> sebastian,2 \\n> lucas,2 \\n> lily,1\\n\\nSum of the ages is 5\\n\")), mdx(\"p\", null, \"We can write a program to compute the average of the ages in the same way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"int sum = 0;\\nint count = 0;\\n\\nwhile (true)\\n{\\n  string input = Console.ReadLine();\\n  if (input == \\\"\\\")\\n  {\\n    break;\\n  }\\n  string[] parts = input.Split(\\\",\\\");\\n  sum = sum + Convert.ToInt32(parts[1]);\\n  count++;\\n}\\nif (count > 0)\\n{\\n  Console.WriteLine(\\\"Age average: \\\" + ((double)sum / count));\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"No input\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> sebastian,2\\n> lucas,2\\n> lily,1\\n\\nAge average: 1.6666666666666667\\n\")), mdx(\"h1\", {\n    \"id\": \"exercises\"\n  }, \"Exercises\"), mdx(Exercise, {\n    title: '022 String three times',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program, that reads a string from the user and then prints it three times.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a word: cake\\n\\ncakecakecake\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"The program should ask for only one string. Don't use a loop here.\")), mdx(Exercise, {\n    title: '023 True string',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that asks the user for a string. If the user writes the string \\\"true\\\", the program prints \\\"You got it right!\\\", otherwise it prints \\\"Try again!\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a string: true \\nYou got it right!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a string: trueish \\nTry again!\\n\"))), mdx(Exercise, {\n    title: '024 Login',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that recognizes the following users:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"username\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"password\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"alex\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"sunshine\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"emma\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"haskell\")))), mdx(\"p\", null, \"The program either shows a login message or informs of incorrect username or password.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter username: \\n>alex \\nEnter password: \\n> sunshine \\nYou have successfully logged in!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter username: \\n> emma \\nEnter password: \\n> haskell \\nYou have successfully logged in!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Enter username: \\n> alex \\nEnter password: \\n> haskell \\nIncorrect username or password!\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"In read life login should not be implemented like this! This is just an exercise.\")), mdx(Exercise, {\n    title: '025 String split',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads strings from the user. If the input is empty, the program stops reading input and halts. For each non-empty input it splits the string input by whitespaces and prints each part of the string on a new line.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> once upon a time \\nonce \\nupon \\na \\ntime \\n> a little program \\na \\nlittle \\nprogram \\n> halted \\nhalted\\n>\\n\"))), mdx(Exercise, {\n    title: '026 Split contains av',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program, that reads user input until an empty line. For each non-empty string, the program splits the string by spaces and then prints the pieces that contain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"av\"), \", each on a new line.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> navy blue shirt\\nnavy\\n> Do you have a favourite flavour\\nhave\\nfavourite\\nflavour\\n> was that a cat\\n>\\n\")), mdx(\"p\", null, \"Tip! Strings have a Contains method, which tells if a string contains another string. It works like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string text = \\\"volcanologist\\\";\\n\\nif (text.Contains(\\\"can\\\")) \\n{\\n  Console.WriteLine(\\\"can was found\\\");\\n}\\n\\nif (!text.Contains(\\\"tin\\\")) \\n{\\n  Console.WriteLine(\\\"tin wasn't found\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"can was found \\ntin wasn't found\\n\"))), mdx(Exercise, {\n    title: '027 First part split',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program, that reads user input until an empty line. For each non-empty line the program splits the string by spaces and prints the first part of the string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> one two three four \\none \\n> this is a very important message \\nthis\\n>\\n\"))), mdx(Exercise, {\n    title: '028 Last part split',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program, that reads user input until an empty line. For each non-empty line the program splits the string by spaces and prints the last part of the string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> one two three four \\nfour \\n> this is a very important message \\nmessage\\n>\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"You can find out the length of the array like this:\", mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string[] parts = {\\\"one\\\", \\\"two\\\", \\\"three\\\"};\\nConsole.WriteLine(\\\"Number of parts: \\\" + parts.Length);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Number of parts: 3\\n\")))), mdx(Exercise, {\n    title: '029 CSV age',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads names and ages from the user until an empty line is entered. The name and age are separed by a comma.\"), mdx(\"p\", null, \"After reading the program prints the age of the oldest person. You can assume, that the user enters at least one person, and that one of the users is older than the others.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> sebastian,2 \\n> lucas,2\\n> lily,1\\n> hanna,5\\n> gabriel,10\\n>\\nAge of the oldest: 10\\n\"))), mdx(Exercise, {\n    title: '030 CSV name',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads names and ages from the user until an empty line is entered. The name and age are separed by a comma.\"), mdx(\"p\", null, \"After reading the program prints the name of the oldest person. You can assume, that the user enters at least one person, and that one of the users is older than the others.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> sebastian,2 \\n> lucas,2\\n> lily,1\\n> hanna,5\\n> gabriel,10\\n>\\nName of the oldest: gabriel\\n\"))), mdx(Exercise, {\n    title: '031 Maximum name and age',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Write a program that reads names and birth years from the user until an empty line is entered. The name and birth year are separed by a comma.\"), mdx(\"p\", null, \"After that the program prints the longest name and the highest age. If multiple names are equally longest, you can print any of them. You can assume the user to enter at least one person, and the current year to be the current year.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"> sebastian,2017 \\n> lucas,2017 \\n> lily,2017 \\n> hanna,2014 \\n> gabriel,2009\\n>\\nLongest name: sebastian \\nHighest age: 11\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#reading-and-printing-strings","title":"Reading and Printing Strings"},{"url":"#string-comparisons","title":"String comparisons"},{"url":"#splitting-a-string","title":"Splitting a String"},{"url":"#data-of-fixed-format","title":"Data of Fixed Format"},{"url":"#using-diverse-text","title":"Using Diverse Text"}]},{"url":"#exercises","title":"Exercises"}]},"frontmatter":{"title":"Strings"}}},"pageContext":{"id":"7a83a4ca-78fa-5385-88ca-d237b1838565"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}