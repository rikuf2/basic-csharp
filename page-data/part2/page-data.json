{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/part2",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Part 2 - Problem solving\",\n  \"nav_order\": 3,\n  \"hidden\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The second part of the material focuses on repetition in programs and on how to divide funcionality into distinct units.\"), mdx(\"p\", null, \"In this part you will learn to recognize that certain sub-problems, such as reading input or calculations, recur in programs. You will be aware of solution models to certain sub-problems. In the exercises, you practice combining solution patterns used on sub-problems to solve broader ones.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"frontmatter":{"title":"Part 2 - Problem solving"}}},"pageContext":{"id":"f2b2a5a1-7af0-579a-8618-283a6cc132c9"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}